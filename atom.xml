<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tsuki&#39;s CodeLife</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tsuki419.github.io/"/>
  <updated>2022-08-16T08:09:01.997Z</updated>
  <id>https://tsuki419.github.io/</id>
  
  <author>
    <name>tsuki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单调栈</title>
    <link href="https://tsuki419.github.io/%E5%8D%95%E8%B0%83%E6%A0%88.html"/>
    <id>https://tsuki419.github.io/单调栈.html</id>
    <published>2022-08-06T14:01:46.367Z</published>
    <updated>2022-08-16T08:09:01.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>单调栈。</p><a id="more"></a><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>判别是否需要使用单调栈，如果需要找到左边或者右边第一个比当前位置的数大或者小，则可以考虑使用单调栈；单调栈的题目如矩形米面积等等</p><p>来源739官解评论区</p><p><a href="https://leetcode.cn/problems/daily-temperatures/" target="_blank" rel="noopener">739. 每日温度</a> </p><p>stack存数组的下标。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deque&lt;Integer&gt; stack = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br></pre></td></tr></table></figure><p>思路是while（栈不空&amp;&amp;当前温度大于栈顶温度），计算ans[]，栈顶出栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> length = temperatures.length;</span><br><span class="line">Deque&lt;Integer&gt; stack = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> temperature = temperatures[i];</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; temperature &gt; temperatures[stack.peek()])&#123;</span><br><span class="line">        <span class="keyword">int</span> preIndex = stack.pop();</span><br><span class="line">        ans[preIndex] = i - preIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    stack.push(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/next-greater-element-i/" target="_blank" rel="noopener">496. 下一个更大元素 I</a> 单调栈+哈希</p><p><a href="https://leetcode.cn/problems/next-greater-element-ii/" target="_blank" rel="noopener">503. 下一个更大元素 II</a> 单调栈+循环数组</p><p><a href="https://leetcode.cn/problems/trapping-rain-water/" target="_blank" rel="noopener">42. 接雨水</a></p><p><a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/" target="_blank" rel="noopener">84. 柱状图中最大的矩形</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单调栈。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="算法" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/leetcode/"/>
    
    
      <category term="单调栈" scheme="https://tsuki419.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
      <category term="算法" scheme="https://tsuki419.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://tsuki419.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="https://tsuki419.github.io/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html"/>
    <id>https://tsuki419.github.io/贪心算法.html</id>
    <published>2022-07-26T13:44:30.316Z</published>
    <updated>2022-08-16T08:20:03.442Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>贪心专题。</p><a id="more"></a><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p><strong>通过局部最优解得到全局最优解</strong></p><p><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/" target="_blank" rel="noopener">leetcode 334 递增的三元子序列</a> 注意递增的子序列可以是不连续的。first， second，third，只要维护这三个数。先确定first和second。</p><p><a href="https://leetcode.cn/problems/jump-game/" target="_blank" rel="noopener">55. 跳跃游戏</a> 明明用了<strong>贪心</strong>为什么待在动态规划列表里。时隔四个月重新做，思路都忘了。此处的贪心是记录最远的位置。</p><p><a href="https://leetcode.cn/problems/jump-game-ii/" target="_blank" rel="noopener">45. 跳跃游戏 II</a> <strong>贪心</strong>，还是<a href="https://leetcode-cn.com/problems/jump-game-ii/solution/45-by-ikaruga/" target="_blank" rel="noopener">这个</a>思路写的清楚，每次在上次跳到的最大范围内选择跳的最远的。有点像最短/长路径问题。</p><p>基本思路就是设置最大位置，在遍历的过程中更新最大的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = nums.length;</span><br><span class="line"><span class="keyword">int</span> maxP = <span class="number">0</span>, step = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">    maxP = Math.max(maxP, nums[i] + i);</span><br><span class="line">    <span class="keyword">if</span>(i == end)&#123;</span><br><span class="line">        end = maxP;</span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">leetcode 122 买卖股票的最佳时机II</a> 买股票系列</p><p><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/" target="_blank" rel="noopener">leetcode 334 递增的三元子序列</a>，最长连续子序列。</p><p><a href="https://leetcode.cn/problems/assign-cookies/" target="_blank" rel="noopener">455. 分发饼干</a> 思路是先排序，然后挨个匹配。和官解思路是一致的。</p><p><a href="https://leetcode.cn/problems/wiggle-subsequence/" target="_blank" rel="noopener">376. 摆动序列</a> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> prediff = nums[<span class="number">1</span>] - nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> len = prediff != <span class="number">0</span> ? <span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> diff = nums[i] - nums[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>((diff &gt; <span class="number">0</span> &amp;&amp; prediff &lt;= <span class="number">0</span>) || (diff &lt; <span class="number">0</span> &amp;&amp; prediff &gt;= <span class="number">0</span>))&#123;</span><br><span class="line">        len++;</span><br><span class="line">        prediff = diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子数组和</a> 思路是动态规划。关键在于状态转移方程。</p><p><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/" target="_blank" rel="noopener">1005. K 次取反后最大化的数组和</a> 思路是排序，把负数取反。这里有个巧妙地点是在负数取反以后再进行一次排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] &lt; <span class="number">0</span> &amp;&amp;  k &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        nums[i] = -nums[i];</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=nums[i];</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="keyword">if</span>(k % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">    sum -= <span class="number">2</span> * nums[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/gas-station/" target="_blank" rel="noopener">134. 加油站</a> 一次遍历。有点像加了cost的跳跃游戏。看了题解有点不理解为什么贴贪心标签。</p><blockquote><p>补充一个推理：</p><p>如果x到不了y+1（但能到y），那么从x到y的任一点出发都不可能到达y+1。因为从其中任一点出发的话，相当于从0开始加油，而如果从x出发到该点则不一定是从0开始加油，可能还有剩余的油。既然不从0开始都到不了y+1，那么从0开始就更不可能到达y+1了…</p><p>来源：官解评论区</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = gas.length;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">    <span class="keyword">int</span> gasSum = <span class="number">0</span>, costSum = <span class="number">0</span>, count = <span class="number">0</span>;<span class="comment">//走过的站点个数</span></span><br><span class="line">    <span class="comment">//找到第一个不能通过的站点</span></span><br><span class="line">    <span class="keyword">while</span>(count &lt; n)&#123;</span><br><span class="line">        <span class="keyword">int</span> curr = (i + count) % n;<span class="comment">//环形路</span></span><br><span class="line">        gasSum += gas[curr];</span><br><span class="line">        costSum += cost[curr];</span><br><span class="line">        <span class="keyword">if</span>(gasSum &lt; costSum)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count == n)&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        i = i + count + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/candy/" target="_blank" rel="noopener">135. 分发糖果</a> 两次遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = ratings.length;</span><br><span class="line"><span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">//先看左边的情况</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; ratings[i] &gt; ratings[i - <span class="number">1</span>])&#123;</span><br><span class="line">        left[i] = left[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        left[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> right = <span class="number">0</span>, ans = <span class="number">0</span>;<span class="comment">//right节省空间</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; n - <span class="number">1</span> &amp;&amp; ratings[i] &gt; ratings[i + <span class="number">1</span>])&#123;</span><br><span class="line">        right++;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        right = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += Math.max(right, left[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/lemonade-change/" target="_blank" rel="noopener">860. 柠檬水找零</a> 面值有三种，采用计数的方法，分情况讨论。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> five = <span class="number">0</span>, ten = <span class="number">0</span>;<span class="comment">//张数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> bill : bills)&#123;</span><br><span class="line">    <span class="keyword">if</span>(bill == <span class="number">5</span>)&#123;</span><br><span class="line">        five++;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(bill == <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(five &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            five--;</span><br><span class="line">            ten++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ten &gt; <span class="number">0</span> &amp;&amp; five &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            ten--;</span><br><span class="line">            five--;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(five &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">            five -= <span class="number">3</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/" target="_blank" rel="noopener">406. 根据身高重建队列</a> 思路从高到低对身高排序，然后依次插入。遇到两个维度权衡的时候，一定要先确定一个维度，再确定另一个维度。</p><p>回顾一下，重写compare和<code>Arraylist</code>用法</p><p><code>arraylist.add（int index，E element）</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(people, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] p1, <span class="keyword">int</span>[] p2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p1[<span class="number">0</span>] != p2[<span class="number">0</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> p2[<span class="number">0</span>] - p1[<span class="number">0</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> p1[<span class="number">1</span>] - p2[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">List&lt;<span class="keyword">int</span>[]&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] person : people)&#123;</span><br><span class="line">    ans.add(person[<span class="number">1</span>], person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h3><p><a href="https://leetcode.cn/problems/non-overlapping-intervals/" target="_blank" rel="noopener">435. 无重叠区间</a> 解法以右端点排序。为什么要选择从左到右遍历，其实没看懂，给右侧区间留空间？官方解答也很迷。</p><blockquote><p>当确定了首个区间之后，所有与首个区间不重合的区间就组成了一个规模更小的子问题。由于我们已经在初始时将所有区间按照右端点排好序了，因此对于这个子问题，我们无需再次进行排序，只要找出其中<strong>与首个区间不重合</strong>并且右端点最小的区间即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = intervals.length;</span><br><span class="line"><span class="keyword">int</span> right = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(intervals[i][<span class="number">0</span>] &gt;= right)&#123;</span><br><span class="line">        right = intervals[i][<span class="number">1</span>];</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener">452. 用最少数量的箭引爆气球</a> 虽然题目饶了一点，但也是区间问题。两个维度。 贪心体现在：当两个区间不相交时，必然需要一直箭去引爆其中一个区间(换句话说，两个区间不可能被同时引爆)，我们在射出这只箭的同时引爆所有可能被引爆的区间(即做出局部最优选择)。</p><p>所以换句话说，这个题是不是还是在求不重叠区间。</p><p>这里遇到了一个测试用例问题。<code>[ [-2147483646,-2147483645],[2147483646,2147483647] ]</code>，相减的写法多半的越界了。</p><p>在<font color="red"><strong>排序</strong></font>时改变书写方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(points, (p1, p2) -&gt; p1[<span class="number">1</span>] &lt; p2[<span class="number">1</span>] ? -<span class="number">1</span> : <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/partition-labels/" target="_blank" rel="noopener">763. 划分字母区间</a> 字符串，贪心。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = s.length();</span><br><span class="line"><span class="keyword">int</span>[] last = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="comment">//字母最后出现的位置</span></span><br><span class="line">    last[s.charAt(i) - <span class="string">'a'</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    end = Math.max(end, last[s.charAt(i) - <span class="string">'a'</span>]);</span><br><span class="line">    <span class="keyword">if</span>(end == i)&#123;</span><br><span class="line">        ans.add(end - start + <span class="number">1</span>);</span><br><span class="line">        start = end + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/merge-intervals/" target="_blank" rel="noopener">56. 合并区间</a> 以左端点排序，合并的区间是连续的。尝试了<code>Arrays.sort()</code>的ES6写法但是执行出错，不知道原因。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = intervals.length;</span><br><span class="line">    Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] p1, <span class="keyword">int</span>[] p2)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> p1[<span class="number">0</span>] - p2[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> L = intervals[i][<span class="number">0</span>], R = intervals[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(ans.size() == <span class="number">0</span> || ans.get(ans.size() - <span class="number">1</span>)[<span class="number">1</span>] &lt; L)&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;L, R&#125;); </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans.get(ans.size() - <span class="number">1</span>)[<span class="number">1</span>] = Math.max(R, ans.get(ans.size() - <span class="number">1</span>)[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[ans.size()][]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/monotone-increasing-digits/" target="_blank" rel="noopener">738. 单调递增的数字</a> 没看懂官解，但是评论区的思路很清楚。</p><blockquote><p>【思路】从左往右遍历各位数字，找到第一个开始下降的数字[i]，将[i]减1，然后将[i+1 …]各位数字全部置为9即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] strN = Integer.toString(n).toCharArray();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; strN.length &amp;&amp; strN[i] &gt;= strN[i - <span class="number">1</span>])&#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i &lt; strN.length)&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &gt; <span class="number">0</span> &amp;&amp; strN[i] &lt; strN[i - <span class="number">1</span>])&#123;</span><br><span class="line">        strN[i - <span class="number">1</span>]--;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i++; i &lt; strN.length; i++)&#123;</span><br><span class="line">        strN[i] = <span class="string">'9'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(<span class="keyword">new</span> String(strN));</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p><a href="https://leetcode-cn.com/problems/find-servers-that-handled-most-number-of-requests/" target="_blank" rel="noopener">leetcode 1606 处理请求最多的服务器</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;贪心专题。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="算法" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/leetcode/"/>
    
    
      <category term="算法" scheme="https://tsuki419.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://tsuki419.github.io/tags/leetcode/"/>
    
      <category term="贪心算法" scheme="https://tsuki419.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security + JWT权限管理</title>
    <link href="https://tsuki419.github.io/SpringSecurity-JWT.html"/>
    <id>https://tsuki419.github.io/SpringSecurity-JWT.html</id>
    <published>2022-04-07T11:28:11.176Z</published>
    <updated>2022-04-11T13:19:25.731Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Spring Security框架确实好用，在简单的集成使用之后，还是决定写一下原理的总结，从源头理解框架的实现。<a id="more"></a>有些内容摘自前人博客。权限认证是几乎每个系统都会用到的技术，特别总结。在项目中的实现参考了mall项目。</p><h2 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h2><p>先贴参考：</p><p><em><a href="https://www.w3cschool.cn/springsecurity/ted11ii1.html" target="_blank" rel="noopener">Spring Security 核心类简介</a></em></p><p><em><a href="https://www.w3cschool.cn/springsecurity/by9h1ii3.html" target="_blank" rel="noopener">认证简介</a></em></p><h3 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h3><p><strong>Authentication</strong> 是一个接口，用来表示用户认证信息的。在用户登录认证之前相关信息会封装为一个 Authentication 具体实现类的对象，在登录认证成功之后又会生成一个信息更全面，包含用户权限等信息的 Authentication 对象，然后把它保存在 SecurityContextHolder 所持有的 SecurityContext 中，供后续的程序进行调用，如访问权限的鉴定等。</p><p><strong>SecurityContextHolder</strong> 是用来保存 <strong>SecurityContext</strong> 的。SecurityContext 中含有当前正在访问系统的用户的详细信息和代表当前用户相关信息的 <strong>Authentication</strong> 的引用。默认情况下，SecurityContextHolder 将使用 <strong>ThreadLocal</strong> 来保存 SecurityContext。</p><p><strong>AuthenticationManager</strong>  是一个用来处理认证（Authentication）请求的接口，它的默认实现是 ProviderManager。通过 <code>Authentication.getPrincipal()</code> 可以获取到代表当前用户的信息，这个对象通常是 UserDetails 的实例。<strong>UserDetails</strong> 是 Spring Security 中一个核心的接口。其中定义了一些可以获取用户名、密码、权限等与认证相关的信息的方法。UserDetails 是通过 UserDetailsService 的 <code>loadUserByUsername()</code> 方法进行加载的。</p><p><strong>Authentication</strong> 的 <code>getAuthorities()</code> 可以返回当前 Authentication 对象拥有的权限，即当前用户拥有的权限。其返回值是一个 GrantedAuthority 类型的数组，每一个 GrantedAuthority 对象代表赋予给当前用户的一种权限。GrantedAuthority 是一个接口，其通常是通过 UserDetailsService 进行加载，然后赋予给 UserDetails 的。</p><div class="note default"><p>看完是不是一堆名词云里雾里，没关系，多看几次就理顺了。</p></div><h3 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h3><p>用户输入用户名和密码登录，SpringSecurity将获取到的用户名和密码封装成一个实现了Authentication接口的<code>UsernamePasswordAuthenticationToken</code>，将上述产生的token传递给<code>AuthenticationManager</code>进行登录验证，验证成功后会返回一个封装了用户权限信息的Authentication对象，通过调用<code>SecurityContextHolder.getContext().setAuthentication()</code>将Authentication对象赋予当前的<code>SecurityContext</code>.</p><h3 id="UserDetailsService"><a href="#UserDetailsService" class="headerlink" title="UserDetailsService"></a>UserDetailsService</h3><p>我们可以通过自己实现UserDetails来定义自己获取用户其他信息的方法。也可以实现UserDetailsService来加载自定义的UserDetails信息。</p><p><a href="https://blog.csdn.net/wangb_java/article/details/86579694" target="_blank" rel="noopener">UserDetails用户详情</a>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">Collection&lt;? extends GrantedAuthority&gt; getAuthorities();<span class="comment">//权限 </span></span><br><span class="line"><span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;    <span class="comment">//密码</span></span><br><span class="line"><span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;    <span class="comment">//用户名</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;   <span class="comment">//账号是否未过期</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;    <span class="comment">//账号是否未锁定</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;<span class="comment">//密码是否未过期</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;        <span class="comment">//是否激活</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BCryptPasswordEncoder</strong>是Spring Security官方推荐的密码解析器，平时多使用这个解析器。BCryptPasswordEncoder是对bcrypt强散列方法的具体实现。是基于Hash算法实现的单向加密。可以通过strength控制加密强度，默认10.</p><p><em><a href="https://zhuanlan.zhihu.com/p/349962352" target="_blank" rel="noopener">Spring Security-安全管理框架</a></em>配合源码给出了自定义登录逻辑修改实例。</p><p><em>其他参考：</em></p><p><em><a href="https://blog.csdn.net/qq_36882793/article/details/102568589" target="_blank" rel="noopener">Spring Security 使用、实现权限访问控制</a></em></p><p><em><a href="https://blog.csdn.net/qq_22078107/article/details/106654924" target="_blank" rel="noopener">Spring Security的GrantedAuthority（已授予的权限）</a></em></p><h2 id="加入JWT验证"><a href="#加入JWT验证" class="headerlink" title="加入JWT验证"></a>加入JWT验证</h2><p>在配置类中加入自定义拦截器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 添加JWT filter</span><br><span class="line">httpSecurity.addFilterBefore(jwtAuthenticationTokenFilter(), UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure><h3 id="传统的Session认证方式"><a href="#传统的Session认证方式" class="headerlink" title="传统的Session认证方式"></a>传统的Session认证方式</h3><p>http协议本身是一种无状态的协议，也就是每发起一次请求就要进行一次用户密码验证。因此我们在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送应用，应用就能识别请求来自哪个用户了，这就是传统的基于<strong>session认证</strong>。</p><p>总的来说登录验证就一下几步：</p><ol><li>获取用户信息</li><li>调用service查询user</li><li>判断用户是否存在：有（存到Session，并跳转首页） 否（跳转到登录页面）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//吐槽一下老旧的代码，甚至逻辑也不太清晰</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">//从请求中获取用户名和密码</span></span><br><span class="line">    String name=request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">    String password=request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">    <span class="comment">//设置session信息</span></span><br><span class="line">    session.setAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">    <span class="comment">//获取用户</span></span><br><span class="line">    UserDao ud=DaoFactory.getInstance().getUserDao();</span><br><span class="line">    JSONObject jsondata = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    <span class="comment">//获取用户等级---查询user</span></span><br><span class="line">    jsondata=ud.getGrade(name, password);</span><br><span class="line">    <span class="comment">//判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(jsondata.getString(<span class="string">"grade"</span>) !=<span class="string">"0"</span>)&#123;</span><br><span class="line">        out.write(jsondata.toString());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>, <span class="string">"您的用户名和密码不正确"</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/login.html"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    out.write(jsondata.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常认证的记录被保存在内存中，传统的方式存在服务器开销大，扩展性差等问题。</p><h3 id="基于token控制"><a href="#基于token控制" class="headerlink" title="基于token控制"></a>基于token控制</h3><p>也是无状态的，但是它不需要在服务端去保留用户的认证信息或者会话信息。流程上是这样的：</p><ul><li>用户使用用户名密码来请求服务器</li><li>服务器进行验证用户的信息</li><li>服务器通过验证发送给用户一个token</li><li>客户端存储token，并在每次请求时附送上这个token值</li><li>服务端验证token值，并返回数据</li></ul><p>这个token必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持<code>CORS(跨来源资源共享)</code>策略，一般我们在服务端这么做就可以了<code>Access-Control-Allow-Origin: *</code>。</p><p><em>以上分析参考自文章<a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener">什么是JWT</a></em></p><h3 id="JWT构成"><a href="#JWT构成" class="headerlink" title="JWT构成"></a>JWT构成</h3><p>第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p><p>jwt的头部承载两部分信息：</p><ul><li>声明类型，这里是jwt</li><li>声明加密的算法 通常直接使用 HMAC SHA256</li></ul><p>payload就是存放有效信息的地方，标注中注册的声明，公有的声明和私有的声明。</p><p>signature这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p><p><em><a href="https://blog.csdn.net/qq_36882793/article/details/102839333" target="_blank" rel="noopener">Spring Security权限控制 + JWT Token认证</a></em>中token验证和权限控制阶段流程也可以参考，收藏一下。</p><h2 id="动态权限控制"><a href="#动态权限控制" class="headerlink" title="动态权限控制"></a>动态权限控制</h2><p>最后回忆一下mall项目的权限控制。最初采用了@PerAuthorize注解定义好需要的权限，将该权限存入权限表，当用户登录时将所有的权限查询出来。然后Spring Security将用户所有的权限值和接口注解定义的权限值进行比对。这样做无法批量控制接口的权限。</p><p>在后来的版本中使用Spring Security实现基于路径的动态权限。</p><p>在配置类中加入<code>DynamicSecurityFilter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有动态权限配置时添加动态权限校验过滤器</span></span><br><span class="line"><span class="keyword">if</span>(dynamicSecurityService!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    registry.and().addFilterBefore(dynamicSecurityFilter(), FilterSecurityInterceptor.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态权限调用过程：</strong></p><p>在<code>DynamicSecurityFilter</code>中调用<code>super.beforeInvocation(fi)</code>方法时会调用<code>AccessDecisionManager</code>中的decide方法用于鉴权操作，而decide中的<code>configAttributes</code>参数会通过<code>SecurityMetadataSource</code>中的<code>getAttributes</code>方法来获取。</p><p>后台资源规则被缓存在了一个Map对象中，当后台资源发生变化时，我们需要清空缓存的数据，然后在下次查询的时候重新加载进来。Mall项目中修改UmsResourceController类，当修改后台资源的时候，需要调用clearDataSource来清空缓存的数据。</p><p><em>参考自<a href="https://mp.weixin.qq.com/s/nvKKNSJuIrGuHeJkUeO7rw" target="_blank" rel="noopener">mall项目升级动态权限控制</a></em></p><p><strong>获取权限列表过程：</strong></p><p><code>UserDetailsService</code>====&gt;调用<code>LoadUserByUsername(String username)</code>====&gt;调用<code>getResourceList(id)</code>====&gt;<code>adminCacheService.getResourceList(id)</code>=====&gt;<code>adminRoleRelationDao.getResourceList(id)</code>;获取到权限列表和UserInfo</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Security框架确实好用，在简单的集成使用之后，还是决定写一下原理的总结，从源头理解框架的实现。
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
      <category term="Java" scheme="https://tsuki419.github.io/tags/Java/"/>
    
      <category term="Spring Security" scheme="https://tsuki419.github.io/tags/Spring-Security/"/>
    
      <category term="JWT" scheme="https://tsuki419.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>My Blog项目学习</title>
    <link href="https://tsuki419.github.io/My-Blog%E8%BF%90%E8%A1%8C%E8%AE%B0%E5%BD%95.html"/>
    <id>https://tsuki419.github.io/My-Blog运行记录.html</id>
    <published>2022-03-25T12:01:16.926Z</published>
    <updated>2022-03-25T11:34:03.287Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>My Blog学习记录</p><p>项目地址： <a href="https://github.com/ZHENFENG13/My-Blog" target="_blank" rel="noopener">My blog</a>，属于是入门的SpringBoot项目吧。</p><a id="more"></a><h2 id="启动分析"><a href="#启动分析" class="headerlink" title="启动分析"></a>启动分析</h2><ul><li>新建数据库时，提供的sql语句：<code>Invalid default value for &#39;create_time&#39;</code>，作者给出的<a href="https://www.cnblogs.com/han-1034683568/p/11418264.html" target="_blank" rel="noopener">参考</a></li></ul><p>虽然github附了开发文档，点进去发现是付费的，用技术吃饭也无可厚非。不过有源码，自己啃就好了。</p><p>后台管理部分主要是操作了session和request的参数，评论分类标签友链博客管理都是差不多的，没什么参考的。感兴趣的是发布博客页面和博客的数据库设计。</p><ol><li><p>博客内容的存储格式：mediumtext</p></li><li><p>发布博客涉及的操作</p><p><a href="https://www.zhantianz.com/91143.html" target="_blank" rel="noopener">transferTo</a>：<strong>零拷贝</strong></p></li></ol><h2 id="富文本和文件上传"><a href="#富文本和文件上传" class="headerlink" title="富文本和文件上传"></a>富文本和文件上传</h2><p><em><a href="https://www.bilibili.com/video/BV14y4y1M7Nc?p=6" target="_blank" rel="noopener">参考视频</a></em></p><p><a href="https://vue3js.cn/interview/vue/nexttick.htm" target="_blank" rel="noopener">nextTik</a></p><p> <a href="https://www.jianshu.com/p/e86c61468285" target="_blank" rel="noopener">懒加载</a></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p><a href="https://www.cnblogs.com/han-1034683568/p/6540079.html" target="_blank" rel="noopener">为什么要用版本控制</a></p><p>没有版本控制系统的话，代码可能被别人或自己不小心覆盖或遗失、也不知道是谁因为什么原因改了这段代码、也没办法可以复原回前几天的修改。有了版本控制系统，开发人员只要将每次开发的变更都纪录（Commit）起来，并且透过版本控制系统中进行更新。</p><p>虽然在上传博客的时候都会用到git但是并没有研究过版本控制。</p><p><a href="https://www.cnblogs.com/somethingWithiOS/p/5636356.html" target="_blank" rel="noopener">git与svn的区别</a></p><h2 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h2><p>读音/taimlif/</p><p><a href="https://www.cnblogs.com/msi-chen/p/10974009.html" target="_blank" rel="noopener">参考博客</a></p><blockquote><ul><li>Thymeleaf是用来开发Web和独立环境项目的服务器端的Java模版引擎</li><li>Spring官方支持的服务的渲染模板中，并不包含jsp。而是Thymeleaf和Freemarker等，而Thymeleaf与SpringMVC的视图技术，及SpringBoot的自动化配置集成非常完美，几乎没有任何成本，你只用关注Thymeleaf的语法即可。</li></ul></blockquote><p>但是这样用的话前后端耦合严重，如果是自己开发项目还好，团队合作就会增加很多的交流问题。前后端分离真香。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My Blog学习记录&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href=&quot;https://github.com/ZHENFENG13/My-Blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;My blog&lt;/a&gt;，属于是入门的SpringBoot项目吧。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="项目" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Java" scheme="https://tsuki419.github.io/tags/Java/"/>
    
      <category term="git" scheme="https://tsuki419.github.io/tags/git/"/>
    
      <category term="thymeleaf" scheme="https://tsuki419.github.io/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>vue学习</title>
    <link href="https://tsuki419.github.io/vue.html"/>
    <id>https://tsuki419.github.io/vue.html</id>
    <published>2022-03-25T11:44:48.746Z</published>
    <updated>2022-03-25T12:20:07.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>vue的简单学习，面向项目学习。包括了一些名词的解释学习和两个前端项目的学习。</p><a id="more"></a><h2 id="vue入门"><a href="#vue入门" class="headerlink" title="vue入门"></a>vue入门</h2><p>vue.js 的<a href="https://cn.vuejs.org/v2/api/#vm-emit" target="_blank" rel="noopener">API文档</a></p><p>下载vue.min.js，使用script标签引入。</p><p> Vue 构造器中有一个el 参数，它是 DOM 元素中的 id。<strong>data</strong> 用于定义属性，<strong>methods</strong> 用于定义的函数，可以通过 return 来返回函数值。双花括号用于输出对象属性和函数返回值</p><p>使用 v-html 指令用于输出 html 代码</p><p>HTML 属性中的值应使用 v-bind 指令。</p><p>指令是带有 v- 前缀的特殊属性。指令用于在表达式的值改变时，将某些行为应用到 DOM 上</p><p>在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定</p><p>按钮的事件我们可以使用 v-on 监听事件，并对用户的输入进行响应。</p><p>组件（Component）是 Vue.js 最强大的功能之一。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>cnpm install -g @vue/cli</code></p><p><a href="mailto:node@10.15.3" target="_blank" rel="noopener">node@10.15.3</a>版本太低，不匹配<a href="mailto:vue@3.x" target="_blank" rel="noopener">vue@3.x</a>的版本</p><p><a href="https://www.jianshu.com/p/c46a45d177cb" target="_blank" rel="noopener">升级node</a>，</p><ol><li><p>通过n模块</p><p><code>npm install -g n</code>报错，改为 <code>npm i -g n --force</code>，安装成功了，但是n命令不能使用。</p></li><li><p><a href="https://www.jianshu.com/p/13c0b3ca7c71" target="_blank" rel="noopener">通过nvm</a></p><p>下载nvm，github太不稳定了，下载不了，感谢博主的<a href="https://blog.csdn.net/qq_44401643/article/details/90400626" target="_blank" rel="noopener">百度云链接</a>，然后<a href="https://www.jianshu.com/p/13c0b3ca7c71" target="_blank" rel="noopener">参照文章</a>进行安装，几个注意点：文件夹名<strong>不要出现</strong> <code>中文</code> 和 <code>空格</code>；在运行<code>nvm install</code> 的时候，有可能会出现无权限安装的问题，如果遇到此问题，请 <code>以管理员身份运行</code> cmd。</p><font color="orange">node安装成功但是npm不能安装。有坑</font><p><a href="https://blog.csdn.net/Deleven_Blog/article/details/100077732" target="_blank" rel="noopener">nvm安装后node生效但是npm不生效</a></p><p>在nvm安装目录，找到 setting.txt用记事本打开添加如下两行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/ </span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure></li></ol><p>   手动去安装，<a href="https://npm.taobao.org/mirrors/npm/" target="_blank" rel="noopener">下载地址</a>，</p><ol><li>自己下载node对应的npm版本</li><li>解压后将文件夹重命名为npm并复制到node_modules目录下</li><li><p>最后将npm中bin目录下的npm以及npm.cmd复制到与node_modules目录同级目录下</p><font color="orange">完美解决。</font><p><a href="https://www.cnblogs.com/fighxp/p/7410235.html" target="_blank" rel="noopener">如何从Windows中删除Node.js</a>：</p></li></ol><p>​    C:\Program Files (x86)\Nodejs<br>   ​    C:\Program Files\Nodejs<br>​    C:\Users{User}\AppData\Roaming\npm（或%appdata%\npm）<br>   ​    C:\Users{User}\AppData\Roaming\npm-cache（或%appdata%\npm-cache）</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nvm install 14.5.0 // 安装14.5.0版本node</span><br><span class="line">   nvm install latest // 安装最新版本node</span><br><span class="line">   </span><br><span class="line">   nvm list // 显示已安装的版本（同 nvm list installed）</span><br><span class="line">   nvm list installed // 显示已安装的版本</span><br><span class="line">nvm list available // 显示所有可以下载的版本</span><br><span class="line">   </span><br><span class="line">nvm use 14.5.0 // 使用14.5.0版本node</span><br><span class="line">   nvm uninstall 14.5.0 // 卸载14.5.0版本node</span><br></pre></td></tr></table></figure><ol start="3"><li><p><a href="https://www.jianshu.com/p/c46a45d177cb" target="_blank" rel="noopener">通过gnvm</a>，方法二成功了，未尝试方法三</p></li><li><p><a href="https://dkvirus.gitbooks.io/-npm/content/di-wu-zhang/52-npm-ban-ben-zhi-shi-zong-jie.html" target="_blank" rel="noopener">nvm知识补充</a></p></li></ol><p><strong>idea创建vue项目</strong>（<a href="https://www.bilibili.com/video/BV14y4y1M7Nc?p=1" target="_blank" rel="noopener">参考视频</a>，<a href="https://blog.csdn.net/qq_29247945/article/details/95601148" target="_blank" rel="noopener">参考博客</a></p><ol><li><a href="mailto:npm@v8.3.1" target="_blank" rel="noopener">npm@v8.3.1</a>好像有<a href="https://github.com/npm/cli/issues/4234" target="_blank" rel="noopener">bug</a>，创建项目出错，<code>npm ERR! Unexpected token &#39;.&#39;</code></li><li>更换版本，<a href="mailto:node@v14.16.0" target="_blank" rel="noopener">node@v14.16.0</a>，<a href="mailto:npm@v6.14.1" target="_blank" rel="noopener">npm@v6.14.1</a>，成功创建</li></ol><p>正式进入开发</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>下载了一个开源模板，RuoYI-Vue，对应的说明文档<a href="https://juejin.cn/post/6844903476661583880" target="_blank" rel="noopener">手摸手，带你用vue撸后台</a>，选择了基础模板==&gt;vueAdmin-template<a href="https://juejin.cn/post/6844903486241374221" target="_blank" rel="noopener">（对应文档）</a>。本篇前端用了element-ui</p><p>后续进行主页面定位的开发，参考开源的代码，博客<a href="https://www.jianshu.com/p/9df016cd65fa" target="_blank" rel="noopener">GPS定位系统(四)——Vue前端</a>，本篇前端用了<a href="https://github.com/iview/iview-admin" target="_blank" rel="noopener">ivew-admin</a>，后台github地址<a href="https://github.com/fly7632785/GpsServer" target="_blank" rel="noopener">GpsServer</a></p><h3 id="项目1目录结构"><a href="#项目1目录结构" class="headerlink" title="项目1目录结构"></a>项目1目录结构</h3><p>router路径映射，通过地址可以访问界面。</p><p>components+views一些代码通过组件的方式打包，在别的界面进行引入。</p><p>搭建页面：使用element组件，参考mall项目，先搭后台管理页面。</p><p>在研读vue-admin-template项目代码前，有必要搞清楚vue项目结构关系。</p><p>而index.html中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>来自index.html正文中的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面有一个id为app的挂载点，之后我们的Vue根实例就会挂载到该挂载点上；</p><p>main.js作为项目的入口文件，在main.js中，新建了一个Vue实例，在Vue实例中，通过</p><p>告诉该实例要挂载的地方；（即实例装载到index.html中的位置）</p><p><a href="https://blog.csdn.net/bandaoyu/article/details/104832809" target="_blank" rel="noopener">参考文章1</a>，<a href="https://blog.csdn.net/qq_20967969/article/details/98470766" target="_blank" rel="noopener">文章2</a></p><h3 id="项目2"><a href="#项目2" class="headerlink" title="项目2"></a>项目2</h3><p>建立数据库和修改连接池配置，虽然出了点小问题，但是意外的很快跑起来了。完美~接下来进行项目的学习，该项目很像我正在做的项目。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>观察路由表，地图相关的有：now-gps; gps-history可以参考。</p><p>store文件夹中user.js, 对user信息的增删改查，处理登录信息，处理轨迹信息。调用了util.js实现对user信息的操控。</p><p>瞎折腾项目gps添加swagger-ui莫名其妙的出问题，</p><ol><li>先是添加版本号解决了插件找不到问题，</li><li><a href="https://www.cnblogs.com/guanghe/p/10238990.html" target="_blank" rel="noopener">swagger报错No handler found for GET /swagger-ui.html</a> 按照博客的方法，添加映射之后，仍然有问题：<code>com.jafir.springboot.exception.TokenException: null</code>，懒得继续搞了，无意义。</li></ol><h2 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h2><p><a href="https://element.eleme.cn/#/zh-CN/component/i18n" target="_blank" rel="noopener">参考文档</a>，适配vue2</p><p><a href="https://element-plus.gitee.io/zh-CN/component/pagination.html" target="_blank" rel="noopener">element-plus参考文档</a>，适配vue3</p><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">参考文档</a></p><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p><a href="https://www.axios-http.cn/docs/intro" target="_blank" rel="noopener">参考文档</a></p><p>Axios 是一个基于 <em><a href="https://javascript.info/promise-basics" target="_blank" rel="noopener">promise</a></em> 网络请求库，作用于<a href="https://nodejs.org/" target="_blank" rel="noopener"><code>node.js</code></a> 和浏览器中。 它是 <em><a href="https://www.lullabot.com/articles/what-is-an-isomorphic-application" target="_blank" rel="noopener">isomorphic</a></em> 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</p><h2 id="mock"><a href="#mock" class="headerlink" title="mock"></a>mock</h2><p>测试用，数据模拟生成器</p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。</p><p>vue<a href="https://www.cnblogs.com/JerryMouseLi/p/11032840.html" target="_blank" rel="noopener">程序的调试</a></p><h2 id="MARK"><a href="#MARK" class="headerlink" title="MARK"></a>MARK</h2><h3 id="pro1"><a href="#pro1" class="headerlink" title="pro1"></a>pro1</h3><ol><li><a href="https://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">Promise</a> 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大—–异步请求？</li><li>JavaScript.trim() 方法用于删除字符串的头尾空白符.</li><li>在接收服务器数据时一般是字符串。我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</li><li>富文本</li></ol><h3 id="pro2"><a href="#pro2" class="headerlink" title="pro2"></a>pro2</h3><ol><li><p>vm.$emit( event, arg ) //触发当前实例上的事件，<a href="https://cn.vuejs.org/v2/api/#vm-emit" target="_blank" rel="noopener">api文档</a></p></li><li><p>.env.development（开发环境）、.env.prodction（正式环境）、自定义环境，<a href="https://blog.csdn.net/qq_42855675/article/details/114261585" target="_blank" rel="noopener">参考博客</a>，vue-cli<a href="https://blog.csdn.net/qq_42855675/article/details/114261585" target="_blank" rel="noopener">官方文档</a></p></li><li><p>前端开发：<a href="https://xie.infoq.cn/article/c5b343c3d8e900ca748df7ac3" target="_blank" rel="noopener">npm run serve 和 npm run dev 的区别</a></p><p>package.json文件中的’scripts’字段定义了怎么启动项目。</p></li></ol><h2 id="登录token处理"><a href="#登录token处理" class="headerlink" title="登录token处理"></a>登录token处理</h2><p><a href="https://blog.csdn.net/qq_41399901/article/details/89070139" target="_blank" rel="noopener">参考博客</a></p><p>通过设置 ajax 拦截器，将 token 放在header 中，使每次请求带上 token，在每次发送请求时，让后台先判断 token 是否合法，再进行下一步操作。</p><p>此处将token临时存储到cookie中。</p><p>登录：当用户填写完账号和密码后向服务端验证是否正确，验证通过之后，服务端会返回一个<strong>token</strong>，拿到token之后（我会将这个token存贮到cookie中，保证刷新页面后能记住用户登录状态），前端会根据token再去拉取一个 <strong>user_info</strong> 的接口来获取用户的详细信息（如用户权限，用户名等等信息）。</p><p>权限验证：通过token获取用户对应的 <strong>role</strong>，动态根据用户的 role 算出其对应有权限的路由，通过 <strong>router.addRoutes</strong> 动态挂载这些路由。<br>链接：<a href="https://juejin.cn/post/6844903478880370701" target="_blank" rel="noopener">https://juejin.cn/post/6844903478880370701</a></p><h2 id="js-cookie"><a href="#js-cookie" class="headerlink" title="js-cookie"></a>js-cookie</h2><p>因为HTTP协议是无状态协议，一旦本次会话结束，客户端与服务器的连接就会关闭，下次需要重新建立连接，服务器就无法跟踪上次会话了。为了跟踪会话，需要使用Cookie</p><p><a href="https://www.kancloud.cn/cy23/vuejs/367166" target="_blank" rel="noopener">参考文档</a></p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>无论是前端还是后台项目的编写都用到了ES6语法。<a href="https://www.cnblogs.com/liubn/p/5694902.html" target="_blank" rel="noopener">参考文章</a></p><p>ES6是JavaScript语言的新一代标准，加入了一些新的功能和语法。</p><ol><li><p>ES6中可以使用 =&gt; 作为函数表达形式，极简风格，参数＋ =&gt; ＋函数体。</p></li><li><p>ES6 推荐在函数中使用 let 定义变量</p><p>const 用来声明一个常量，但也并非一成不变的</p><p>let 和 const 只在最近的一个块中（花括号中）有效</p></li><li><p>ES6 中可以通过 Symbol.iterator 给对象设置默认的遍历器，直到状态为true退出。</p></li><li><p>ES6还是有很多棒棒的语法，有利于精简代码，高效开发；只不过一些低级别浏览器不支持，可以用Babel等工具把ES6转化成ES5，但是有些语法还是不够完善</p></li></ol><p>@TableId(value=”id”, type=IdType.AUTO) 设置id自增</p><h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><p>类似面向对象的继承机制，定义一个基类，继承自基类，可以复用代码，<a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">参考文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue的简单学习，面向项目学习。包括了一些名词的解释学习和两个前端项目的学习。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://tsuki419.github.io/tags/vue/"/>
    
      <category term="element-ui" scheme="https://tsuki419.github.io/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>mall学习记录</title>
    <link href="https://tsuki419.github.io/mall%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95.html"/>
    <id>https://tsuki419.github.io/mall开源项目记录.html</id>
    <published>2022-03-25T11:42:16.637Z</published>
    <updated>2022-04-26T08:00:16.505Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不算是学习的第一个开源项目，但是是第一个运行起来的开源项目。作者的说明文档真的写的太棒了，手把手教学。</p><a id="more"></a><p>在自己准备定位系统项目的过程中碰壁好多，突发奇想，现在的水平自己造轮子很烂，老师给的项目也比较老旧，没有参考价值，没有进展，转换思维，不如先找个开源的优秀项目学习一下。</p><p>(这篇文章是去年存货了，最近整理一下都存在博客里，在这个项目中真的学到了很多，在学习mall之前还是个启动开源项目都会出好多bug的小白，现在进步了一点点)</p><h2 id="启动记录"><a href="#启动记录" class="headerlink" title="启动记录"></a>启动记录</h2><p>首先github地址贴上 <a href="https://github.com/macrozheng/mall-admin-web" target="_blank" rel="noopener">前端</a> <a href="https://github.com/macrozheng/mall" target="_blank" rel="noopener">后端</a></p><p>前端：</p><ul><li><p><code>Error: sass-loader requires node-sass ＞=4. Please install a compatible version.</code></p><p>输入下面代码，<a href="https://blog.csdn.net/xing_S/article/details/109250755" target="_blank" rel="noopener">参考博客</a></p><p><code>npm install sass-loader node-sass -D</code></p></li></ul><p>后端的<a href="http://www.macrozheng.com/#/foreword/mall_foreword_02?id=linux" target="_blank" rel="noopener">架构和技术选型文档</a>，有教程文档太贴心了。</p><ol><li><p>首先当然是，<code>git clone 地址.git</code>，连接不上github直接采用了下载zip，效果是一样的。</p></li><li><p>准备环境。</p><ol><li>Redis—-<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">下载地址</a> v3.2.100</li><li>Elasticsearch–下载地址 v7.6.2 搜索功能优化</li><li>Kibana–下载 v7.6.2 作为访问Elastisearch的客户端</li><li>Logstash–下载 v7.6.2 用于收集日志</li></ol></li><li><p>建立数据库—<a href="https://github.com/macrozheng/mall-learning/blob/master/document/sql/mall.sql" target="_blank" rel="noopener">下载地址</a></p><ul><li>查看数据库存储的<a href="https://blog.csdn.net/anana125/article/details/105739526" target="_blank" rel="noopener">位置</a></li><li>导入数据库脚本，要先创建mall数据库</li><li><a href="http://www.macrozheng.com/#/foreword/mall_foreword_01?id=数据库表前缀说明" target="_blank" rel="noopener">数据库表前缀说明</a><ul><li>cms_*：内容管理模块相关表</li><li>oms_*：订单管理模块相关表</li><li>pms_*：商品模块相关表</li><li>sms_*：营销模块相关表</li><li>ums_*：会员模块相关表</li></ul></li></ul></li><li><p>启动redis </p><p>进入安装位置，输入 <code>redis-server.exe redis.windows.conf</code></p></li><li><p>启动后端程序，启动前端界面</p></li><li><p>登录出错</p><ul><li><p><code>java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter</code> 原因是jdk版本过高，可以手动导入或者降低jdk版本 参考了<a href="https://blog.csdn.net/zixiao_love/article/details/112343670" target="_blank" rel="noopener">博客</a></p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    导入4个jar包，解决jdk9缺失jar包引起的报错--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter--&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p>啊，至此admin启动成功，感动哭。</p><h2 id="基础技术补充"><a href="#基础技术补充" class="headerlink" title="基础技术补充"></a>基础技术补充</h2><p>配套mall学习代码<a href="https://github.com/macrozheng/mall-learning" target="_blank" rel="noopener">git地址</a></p><h3 id="搭建基本骨架"><a href="#搭建基本骨架" class="headerlink" title="搭建基本骨架"></a>搭建基本骨架</h3><h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><p>Lombok表达式—面向函数编程</p><p>参考<a href="https://www.jianshu.com/p/2543c71a8e45" target="_blank" rel="noopener">1</a> <a href="https://www.cnblogs.com/zhangyinhua/p/8623018.html" target="_blank" rel="noopener">2</a></p><h4 id="MyBatisGenerator"><a href="#MyBatisGenerator" class="headerlink" title="MyBatisGenerator"></a>MyBatisGenerator</h4><p>MyBatis的代码生成器，可以根据数据库生成model、mapper.xml、mapper接口和Example，通常情况下的单表查询不用再手写mapper。</p><h3 id="Swagger-UI实现在线API文档"><a href="#Swagger-UI实现在线API文档" class="headerlink" title="Swagger-UI实现在线API文档"></a>Swagger-UI实现在线API文档</h3><h3 id="Security-JWT-认证和授权"><a href="#Security-JWT-认证和授权" class="headerlink" title="Security+JWT 认证和授权"></a>Security+JWT 认证和授权</h3><p><strong>mall-tiny-04</strong></p><ul><li>报错：<code>javax.xml.bind.DatatypeConverter</code> 同样是jdk版本太高了，参考了<a href="https://blog.csdn.net/qiqibei666/article/details/103018960" target="_blank" rel="noopener">博客</a></li><li>莫名其妙的swagger接口测试失败，所以删除了项目重新解压载入，解决上述报错后测试成功。估计上次错误也是这个原因，但是不提示报错信息，就束手无策了。</li><li>知道了，这时候的解决方法是打断点，进入debug。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String token = adminService.login(umsAdminLoginParam.getUsername(), umsAdminLoginParam.getPassword());</span><br><span class="line">============&gt;</span><br></pre></td></tr></table></figure><h3 id="Elasticsearch实现商品搜索"><a href="#Elasticsearch实现商品搜索" class="headerlink" title="Elasticsearch实现商品搜索"></a>Elasticsearch实现商品搜索</h3><p>报错： </p><ul><li><code>None of the configured nodes are available:</code> 通常是clustername设置有问题，但在本项目中是因为版本不匹配，下载了v7.6.2，yml的配置已经修改。</li></ul><p>Spring Data Elasticsearch，一种以Spring Data风格来操作数据存储的方式。</p><ol><li><p>添加依赖修改配置文件。</p></li><li><p>新建商品文档对象：EsProduct，接口EsProductDao实现与数据库交互，导入数据到ES文档</p><blockquote><p>不需要中文分词的字段设置成@Field(type = FieldType.Keyword)类型，需要中文分词的设置成@Field(analyzer = “ik_max_word”,type = FieldType.Text)类型。</p></blockquote></li><li><p>EsProductRepository extends ElasticsearchRepository：这样就拥有了一些基本的 Elasticsearch 数据操作方法，同时定义了一个衍生查询方法。</p></li><li><p>EsProductService-EsProductServiceImpl：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EsProductService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库中导入所有商品到ES</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">importAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id创建商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">EsProduct <span class="title">create</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(List&lt;Long&gt; ids)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据关键字搜索名称或者副标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Page&lt;EsProduct&gt; <span class="title">search</span><span class="params">(String keyword, Integer pageNum, Integer pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>EsProductController：聚合EsProductService，调用Service方法完成搜索。映射搜索请求路径。</li></ol><p>创建索引，获取索引，jsoup解析网页</p><h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><ul><li>在 SpringBoot 中，使用 Elasticsearch Repositories 的衍生物查询来实现；查询结果的原理原理就是将规则方法名称的方法名称转换为 E 的查询 DSL 语句</li></ul><h4 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h4><h3 id="Mongodb实现文档操作"><a href="#Mongodb实现文档操作" class="headerlink" title="Mongodb实现文档操作"></a>Mongodb实现文档操作</h3><p>使用场景： 各种应用服务的日志存储，敏捷开发，地理位置信息存储，json存储。</p><p>示例添加会员浏览记录</p><p>非关系型数据库，和elasticsearch的操作非常像，都是Spring Data类型的数据操作</p><ol><li>添加依赖，修改配置</li><li>建立文档</li><li>继承MongoRepository，这样就有了一些基本的操作Mongodb数据操作方法。</li></ol><ul><li><p>两者都可使用<strong>衍生查询</strong></p><p>在接口中直接指定查询方法名称便可查询，无需进行实现</p></li></ul><p><strong>安装</strong>过程中的踩坑：</p><p>按照教程步骤进行但是连接失败。</p><ol><li><p>安装路径中不要包含空格， NO Program Files！留下血泪。<a href="https://blog.csdn.net/qq_42442369/article/details/84403964" target="_blank" rel="noopener">保姆级教程</a></p><p><a href="https://www.jianshu.com/p/f9f1454f251f" target="_blank" rel="noopener">mongod..cfg重要配置详解</a></p></li><li><p>仍然有问题，删除data目录下的文件又重新建了文件夹。<a href="https://blog.csdn.net/grs294845170/article/details/77848114" target="_blank" rel="noopener">参考博客</a></p></li><li><p>管理员身份运行，问题解决</p><p><code>mongod --config &quot;E:\Programs\MongoDB\Server\3.2\mongod.cfg&quot; --install --serviceName &quot;MongoDB&quot;</code></p><p><code>net start MongoDB</code></p></li></ol><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p><a href="http://www.macrozheng.com/#/architect/mall_arch_03" target="_blank" rel="noopener">tiny-03</a></p><p>可用于数据缓存，主要用于处理大量数据的高访问负载。</p><p>整合redis的过程以短信验证码为例。</p><ol><li>application.yml添加redis的配置，添加自定义key的设置</li><li>添加RedisService接口用于定义常用Redis操作。</li><li>实现RedisService接口（注入StringRedisTemplate（继承自RedisTemplate））</li><li>添加根据电话号码获取验证码接口 Controller</li><li>添加需要的功能服务接口和实现类</li></ol><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><p>教学示例中获取动态验证码通过StringBuilder来产生。</p><p>摘自<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.text.stringbuilder?view=net-6.0" target="_blank" rel="noopener">官方文档</a></p><p> <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.text.stringbuilder?view=net-6.0" target="_blank" rel="noopener">StringBuilder</a> ，它是一个可变字符串类。 可变性是指在创建类的实例后，可以通过追加、移除、替换或插入字符来修改它。<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.text.stringbuilder?view=net-6.0" target="_blank" rel="noopener">StringBuilder</a>对象维护缓冲区以容纳对字符串的扩展。</p><p><strong>使用场景</strong>：</p><ul><li>如果希望代码在设计时对字符串进行未知数量的更改 (例如，当你使用循环来连接包含用户输入) 的随机数量的字符串时。</li><li>希望代码对字符串进行大量更改时。</li></ul><h3 id="RabbitMQ-实现延迟消息"><a href="#RabbitMQ-实现延迟消息" class="headerlink" title="RabbitMQ 实现延迟消息"></a>RabbitMQ 实现延迟消息</h3><p><strong>安装：</strong></p><p>Erlang下载，记得安装完成配置环境变量，<a href="https://www.cnblogs.com/chensisi/p/13203111.html" target="_blank" rel="noopener">安装教程</a></p><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.7.14" target="_blank" rel="noopener">Rabbitmq下载路径</a></p><p><a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a></p><h3 id="OSS-实现文件上传"><a href="#OSS-实现文件上传" class="headerlink" title="OSS 实现文件上传"></a>OSS 实现文件上传</h3><h2 id="业务熟悉：数据库设计"><a href="#业务熟悉：数据库设计" class="headerlink" title="业务熟悉：数据库设计"></a>业务熟悉：数据库设计</h2><p>整个看了一遍。还是挺复杂的。</p><p>商品模块：主页面的商品分类，商品品牌（店铺），商品属性选择（属性和描述参数）；编辑商品（商品基本信息，促销信息，属性信息，关联），库存表，打折表（满减方式，打折方式，会员积分抵扣方式），商品评价和回复，商品操作记录;</p><p>订单模块：不同状态下的订单，订单表，订单商品表（一个订单包含不同的商品），订单操作记录表；从下单到选地址，计算优惠，到形成订单预览，选择支付方式，订单处理，售后服务（订单退货，退货原因管理，退货地址管理）。</p><p>营销模块：限时购主题设置，限时购商品选择（秒杀活动）；优惠券表；首页品牌推荐表，新品推荐，人气推荐，首页专题推荐，首页轮播广告。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>mall-common, mall-mbg, mall-security都是被调用的模块。</p><p>mall-portable调用了mall-mbg和mall-security.</p><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p>角色管理</p><p>本项目的角色分为商品管理员，订单管理员，超级管理员，普通用户。</p><p>角色——资源和菜单的分配，资源指的是对接口的访问。</p><ul><li>返回树形结构的数据，stream流可以很好解决嵌套问题。</li></ul><p>目录权限，菜单权限，按钮权限</p><p>关于权限控制的内容写了一个总结，可以跳转，<a href="https://tsuki419.github.io/SpringSecurity-JWT.html#more">SpringSecurity-JWT</a></p><h3 id="商品模块"><a href="#商品模块" class="headerlink" title="商品模块"></a>商品模块</h3><p>参考我们使用某宝的习惯，打开软件是首页推荐，可以分类分级选择商品分类，点击查看店铺详情，选择商品打开商品详情页，显示商品基本信息，促销信息，属性信息，关联推荐，已买用户评价。</p><p>该模块实现了部分上述功能，商品分类属性，商品库存，店铺管理。</p><p><font color="orange"><strong>可扩展的</strong></font>，还可以增加提问与回答模块，店铺自己的联想推荐，新增评价（评价管理），。</p><p>在自己写代码的过程中总结的写业务流程大概是，<strong>先了解业务相关的名词，然后理清逻辑设计数据库，写出伪代码/流程图，最后实践写代码</strong>。</p><p>参考这一流程浅析一下作者的实现。</p><p>这一模块中最复杂的service应该是<code>PmsProductService</code>，也是最核心的服务之一，每次下单的操作都是对商品的操作。如何计算商品优惠后的价格，下单后对库存进行操作在<code>mall-portal</code>中实现。</p><h3 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h3><p>订单模块包括下单到选地址，计算优惠，到形成订单预览，选择支付方式，订单处理，售后服务。</p><p><code>OmsOrderService</code>订单管理启用了Spring事务，在上一个模块中也有新建和删除操作采用了事务管理，批量发货，批量关闭订单，修改订单收货人信息，修改订单费用信息，修改订单备注这几个方法都加了<code>@Transactional</code>的注解，每个操作中注意更新订单操作历史。</p><p><code>OmsOrderSettingService</code>可以设置订单超时时间。</p><p>已经实现的功能偏向于店铺管理人员操作，批量处理订单，处理退货申请，查看订单详情。</p><p><font color="orange"><strong>可选的</strong></font>，新增订单，提交退货申请，用户的商品浏览历史，从使用者的角度增加业务功能。</p><h3 id="营销模块"><a href="#营销模块" class="headerlink" title="营销模块"></a>营销模块</h3><p>首页专题推荐，首页新/商品推荐，首页品牌推荐，首页广告。促销活动场次添加，商品添加。优惠券管理。</p><p>这里的推荐算法是简单的使用了数据库字段的推荐值排序。要涉及实际情况的推荐算法又是一个大坑了。</p><p>有时间写一个推荐算法调研。</p><p><font color="orange"><strong>可扩展的</strong></font>，秒杀模块，直播模块，消息模块。</p><p>以上几个模块都是在后台管理服务<strong>mall-admin</strong>模块下的，所以没有软件使用者角度的方法，接下来<strong>mall-portal</strong>模块，实现了客户端的请求处理。</p><p>收藏，关注，浏览历史，购物车管理，退货管理，前台订单管理，促销管理（计算购物车价格）。</p><p>收藏关注浏览历史都用MongoDB来存储。</p><p>MongoRepository</p><h2 id="进阶篇-微服务项目"><a href="#进阶篇-微服务项目" class="headerlink" title="进阶篇-微服务项目"></a>进阶篇-微服务项目</h2><p>Spring Cloud系列在我看来目前用不到，跟着作者的学习用例浅浅试用了一下，自己搭建的单体小项目用不到，接触不到公司项目就只能浅浅了解一下。</p><p>挖坑，分布式调研。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不算是学习的第一个开源项目，但是是第一个运行起来的开源项目。作者的说明文档真的写的太棒了，手把手教学。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="项目" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Java" scheme="https://tsuki419.github.io/tags/Java/"/>
    
      <category term="Spring Security" scheme="https://tsuki419.github.io/tags/Spring-Security/"/>
    
      <category term="MybatisGenerator" scheme="https://tsuki419.github.io/tags/MybatisGenerator/"/>
    
      <category term="SwaggerUI" scheme="https://tsuki419.github.io/tags/SwaggerUI/"/>
    
      <category term="Elasticsearch" scheme="https://tsuki419.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>fly bird</title>
    <link href="https://tsuki419.github.io/flappy-bird.html"/>
    <id>https://tsuki419.github.io/flappy-bird.html</id>
    <published>2022-03-23T13:55:28.695Z</published>
    <updated>2022-03-24T01:52:59.301Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>搞点好玩的，这个简单的项目实现主要就是画面数值的精确计算。<a href="https://git.nowcoder.com/999991353/fly-bird" target="_blank" rel="noopener">fly bird</a></p><a id="more"></a> <h2 id="绘制分析"><a href="#绘制分析" class="headerlink" title="绘制分析"></a>绘制分析</h2><p>画面总的分为三部分，运行画面，开始画面和结束画面。设置<strong>状态转换</strong>，点击开始画面进入运行状态，点击结束画面回到开始状态（重新加载地图）。运行状态的设计是游戏核心。分析游戏的运行是通过鼠标点击来改变小鸟的运动，因此要对界面添加一个监听器，监听鼠标的变化。</p><p><strong>地面类和柱子类</strong>都只需要计算好初始化位置和平移位置。</p><p>主要的逻辑在<strong>小鸟类</strong>实现。小鸟的飞行动作由加载的一系列图片循环加载完成。每一次点击都是完成一次抛物运动，因此涉及到了初速度，角度，重力加速度（伪）属性，以及时间属性。小鸟的位移只有垂直位移，移动的效果是通过地面和柱子的移动完成的。视觉上小鸟在做抛物线是由小鸟的旋转角度变化实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alpha = Math.atan(s / <span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>最后就是要判定游戏得分条件和结束条件。</p><h2 id="Java-Swing"><a href="#Java-Swing" class="headerlink" title="Java Swing"></a>Java Swing</h2><p>游戏用到了Java SWing，<a href="https://www.runoob.com/w3cnote/java-swing-demo-intro.html" target="_blank" rel="noopener">Swing</a>是一个用于Java GUI的工具包。</p><blockquote><p><strong>JFrame</strong> – java的GUI程序的基本思路是以JFrame为基础，它是屏幕上window的对象，能够最大化、最小化、关闭。<br><strong>JPanel</strong> – Java图形用户界面(GUI)工具包swing中的面板容器类，包含在javax.swing 包中，可以进行嵌套，功能是对窗体中具有相同逻辑功能的组件进行组合，是一种轻量级容器，可以加入到JFrame窗体中。</p></blockquote><p>在main程序中new JFrame()，添加了BirdGame()，其中BirdGame()继承自JPanel。</p><p><strong><a href="http://c.biancheng.net/view/1235.html" target="_blank" rel="noopener">监听器</a></strong></p><h3 id="BufferedImage"><a href="#BufferedImage" class="headerlink" title="BufferedImage"></a>BufferedImage</h3><p> <a href="https://blog.csdn.net/jiachunchun/article/details/89670721" target="_blank" rel="noopener">BufferedImage</a>是Image的一个子类，主要作用是将一幅图片加载到内存中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedImage image = ImageIO.read(new FileInputStream(imgPath));</span><br></pre></td></tr></table></figure><p>显示BufferedImage用Graphics: Graphics.drawImage()</p><p><strong>Graphics</strong>提供基本绘图和显示格式化文字的方法，Graphics2D提供了更强大的绘图能力。</p><p><a href="https://blog.csdn.net/liuxinhua2013/article/details/38261571" target="_blank" rel="noopener">repaint</a>: 重绘此组件。如果组件是轻量组件，则此方法会尽快调用此组件的 paint 方法。否则此方法会尽快调用此组件的 update 方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搞点好玩的，这个简单的项目实现主要就是画面数值的精确计算。&lt;a href=&quot;https://git.nowcoder.com/999991353/fly-bird&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fly bird&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="项目" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Java" scheme="https://tsuki419.github.io/tags/Java/"/>
    
      <category term="Swing" scheme="https://tsuki419.github.io/tags/Swing/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://tsuki419.github.io/MySQL.html"/>
    <id>https://tsuki419.github.io/MySQL.html</id>
    <published>2022-03-22T14:03:11.168Z</published>
    <updated>2022-03-25T14:11:55.309Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MySQL的底层基础补一下。先占个坑。</p><a id="more"></a><h2 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h2><p>先检查是否有权限，如果没有权限直接返回，如果有权限就去查询缓存QueryCache（如果开了的话，现在已经关掉了），命中直接返回结果否则进行词法分析，语法分析，优化器进行优化（语义优化，语法优化，执行优化），然后执行，返回结果。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>MySQL的存储采用了B+树的数据结构，建立的索引也是B+树。B+树是一种多路平衡树，最大搜索次数是树的深度。B+树支持全局搜索，相较二叉查找树更加矮胖，同样B树的非叶子节点存储数据信息，而B+树只存储键值，剩余的位置可以存储更多的键值，使得树更矮胖。因为叶子结点都在同一层，查询时间稳定。叶子结点由指针链接起来对范围查找非常有利。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>要不要建立索引要多方考虑，索引的类型很多。ElasticSearch中采用了倒排索引，而MySQL中主键是聚簇索引，属于一级索引。</p><blockquote><p>一级索引：B+树，叶子结点包含了行的全部数据（索引和数据存储），节点页只包含主键。</p><p>二级索引：二级索引可以有0个，1个或者多个。二级索引的结点只存被索引列的值，而二级索引的叶子结点存索引列值和主键值。</p></blockquote><p>数据库容错</p><p>主从复制</p><h2 id="QueryCache"><a href="#QueryCache" class="headerlink" title="QueryCache"></a>QueryCache</h2><p><em><a href="https://mp.weixin.qq.com/s/LZBctWNWi3qehb-dgUCmxQ" target="_blank" rel="noopener">参考</a></em></p><p>避免相同SQL的硬解析（语法分析&gt;语义分析&gt;生成执行计划），SQL执行结果缓存在RESULT CACHE内存组件中，有效将的将物理IO转化为逻辑IO，提高SQL执行效率。但是更新数据库使缓存失效，因此频繁更新操作并不适合开启QC。理想的情况是相同的查询由相同或者多个客户机重复发出，被访问的底层数据本质上是静态或者半静态，并发性和QPS(Query Per Second)都不高，然而实际的业务系统都是有CRUD的，数据更新比较频繁，查询接口的QPS比较高。开启后对数据库并发度和处理能力都会降低很多。同时查询缓存碎片化还会导致服务器的负载升高，影响数据库的稳定性。</p><p>查询缓存分片数据块默认大小是4KB，如果有很多查询结果很小，那么默认数据块大小可能会导致内存碎片，由于内存不足，碎片可能会强制查询缓存从缓存中删除查询。在这种情况下，可以减小它的值，如果大量的查询有较大的结果集，可以增大该参数的值来<strong>提高性能</strong>。</p><blockquote><p>这段的思想其实就是组原学过的内存管理，虽然QC已经退出MySQL，但在系统优化方法上还是可以学习的。</p></blockquote><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><h3 id="BufferPool"><a href="#BufferPool" class="headerlink" title="BufferPool"></a>BufferPool</h3><p><em><a href="https://mp.weixin.qq.com/s/wr2gJGQSA8QH_lmPh1XOkw" target="_blank" rel="noopener">参考</a></em></p><p>MySQL不会直接修改磁盘的数据，会先改内存，然后记录redo log，等有空了再刷新磁盘，这些数据就存在Bufer Pool。就像我们平时开发会用redis来缓解数据库压力。基于LRU(least recently used)算法来管理内存。</p><blockquote><p>这其实也是内存管理内容，缓存的思想无处不在。</p></blockquote><h3 id="Change-Buffer"><a href="#Change-Buffer" class="headerlink" title="Change Buffer"></a>Change Buffer</h3><p>只在操作二级索引时才用，因为聚簇索引必须是唯一的。要修改的页不在内存里，就把要对页的修改先寄到Change Bufer中，同时记录redo log，再慢慢把数据load到内存，然后把Change Buffer中的修改应用到内存（Buffer Pool)中，这个动作叫merge。</p><h3 id="Adaptive-Hash-Index"><a href="#Adaptive-Hash-Index" class="headerlink" title="Adaptive Hash Index"></a>Adaptive Hash Index</h3><p>MySQL索引在磁盘和内存都是B+树，频繁访问的数据用指针把数据位置记录下来。</p><h3 id="Log-Buffer"><a href="#Log-Buffer" class="headerlink" title="Log Buffer"></a>Log Buffer</h3><p>redo log会刷到磁盘中。</p><h3 id="Doublewrite-Buffer"><a href="#Doublewrite-Buffer" class="headerlink" title="Doublewrite Buffer"></a>Doublewrite Buffer</h3><p>用来保证数据页可靠性。</p><p>MySQL在刷数据到磁盘之前，要先把数据写到Doublewrite Buffer, 写完之后再开始写磁盘。万一发生crash可以利用它来修复磁盘数据。</p><h2 id="PageCache"><a href="#PageCache" class="headerlink" title="PageCache"></a>PageCache</h2><p>是操作系统层面的，在磁盘上提供的缓存区。</p><h2 id="面试专题"><a href="#面试专题" class="headerlink" title="面试专题"></a>面试专题</h2><p>参考<a href="https://mp.weixin.qq.com/s/MaVYENapeJcLNpYcR7tqBQ" target="_blank" rel="noopener">1</a> <a href="https://mp.weixin.qq.com/s/vwHkXGNCdRdx8k7BeBMy9w" target="_blank" rel="noopener">2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL的底层基础补一下。先占个坑。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="数据库" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://tsuki419.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://tsuki419.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>JDBC和Druid</title>
    <link href="https://tsuki419.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93II.html"/>
    <id>https://tsuki419.github.io/数据库II.html</id>
    <published>2022-03-22T13:47:42.177Z</published>
    <updated>2022-03-22T14:11:20.753Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>算是数据库实战篇简单实现篇，包括了安装MySQL，使用JDBC和数据库连接池。</p><a id="more"></a><p>参考视频学习<a href="https://www.bilibili.com/video/BV1qv4y1o79t?p=25&amp;spm_id_from=pageDriver" target="_blank" rel="noopener">数据库软件</a>的使用。</p><p>同时参考了<a href="https://blog.csdn.net/qq_22172133/article/details/81266048" target="_blank" rel="noopener">博客</a>，作者写的很全面。</p><p>可视化工具<a href="https://www.cnblogs.com/pengpengdeyuan/p/14364777.html" target="_blank" rel="noopener">SQLyog下载</a></p><p>MySQL</p><ol><li><p>安装</p></li><li><p>卸载，要删除注册表，删除C:/ProgramData下的MySQL文件。</p></li><li><p>配置 </p><ol><li>cmd==&gt;services.msc打开服务窗口</li><li>net stop mysql//以管理员身份打开cmd窗口</li><li>net start mysql</li></ol></li><li><p>登录 </p><ol><li>mysql -uroot -pxxxx</li><li>mysql -hip -uroot -pxxxx连接目标的密码（远程使用）</li><li>mysql –host=ip –user=root –password=连接目标的密码</li><li>退出<ol><li>exit</li><li>quit</li></ol></li><li>目录结构<ol><li>安装目录 my.ini数据库配置信息</li><li>数据目录</li></ol></li></ol></li><li><p>常用查询语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">show create database;</span><br><span class="line">create database if not exists db character set gbk;</span><br><span class="line">drop database if exists db;</span><br><span class="line"></span><br><span class="line">use db;</span><br><span class="line">select database();</span><br><span class="line">show tables;</span><br><span class="line">desc db;//表结构</span><br></pre></td></tr></table></figure></li></ol><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><ol><li>在尝试Jdbc快速入门的时候遇到了class.forName(“com.mysql.jdbc.Driver”)加载失败，产生报错<code>java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</code>，原因是同一个project建立了两个module时，第二个module并没有成功引入依赖jar包。解决方法，libs加入路径时搞错了。现在新版本不写class.forName()也可以通过，加了反而出错，原因不明。</li><li><code>Access denied for user &#39;&#39;@&#39;localhost&#39; (using password: YES)</code>常见错误，查看数据库连接配置的用户名和密码是否正确</li></ol><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><ul><li><p><strong>使用步骤</strong></p><p>下载导入;注册驱动;获取连接对象Connection;定义sql;获取执行对象;执行sql，返回结果;处理结果;释放资源</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 加载数据库驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">Class.forName(<span class="string">"com.microsoft.jdbc.sqlserver.SQLServerDriver"</span>);</span><br><span class="line"><span class="comment">//2. 建立连接</span></span><br><span class="line">URL用于标识数据库的位置</span><br><span class="line">Connection conn = DriverManager.getConnnection(url, user, pass);<span class="comment">//通常存在配置文件中</span></span><br><span class="line"><span class="comment">//3.执行数据库语句</span></span><br><span class="line">Statement st = conn.creatStatement();<span class="comment">//向数据库发送连接的statement对象</span></span><br><span class="line">String sql = <span class="string">"select id, name from student;"</span></span><br><span class="line"><span class="keyword">int</span> count = st.executeQuery(sql);</span><br><span class="line"><span class="keyword">if</span>(count)&#123;</span><br><span class="line">    System.out.println(<span class="string">"成功创建"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"创建失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">conn.close();</span><br><span class="line">st.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">UserService </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">register</span><span class="params">(User user)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">active</span><span class="params">(String code)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">login</span><span class="params">(User user)</span></span>;</span><br><span class="line">UserServlet</span><br><span class="line">    register</span><br><span class="line">    login</span><br><span class="line">    active</span><br><span class="line">    findOne</span><br><span class="line">    exit</span><br><span class="line">UserDao</span><br><span class="line">    <span class="function">User <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">findByCode</span><span class="params">(String code)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateStatus</span><span class="params">(User user)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">findByUsernameAndPassword</span><span class="params">(String username, String password)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="抽取JDBC工具类"><a href="#抽取JDBC工具类" class="headerlink" title="抽取JDBC工具类"></a>抽取JDBC工具类</h3><ul><li><p>分析</p><ol><li>注册驱动抽取 Class.forName()</li><li>抽取方法连接对象 </li><li>抽取方法释放资源</li></ol><p>工具类静态方便调用</p><p><strong>静态代码块</strong>：在加载如内存的时候就执行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取src路径下文件的方式</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL res = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            String path = res.getPath();</span><br><span class="line">            prop.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            url = prop.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            username = prop.getProperty(<span class="string">"username"</span>);</span><br><span class="line">            password = prop.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            driver = prop.getProperty(<span class="string">"driver"</span>);</span><br><span class="line"></span><br><span class="line">            Class.forName(driver);<span class="comment">//加载驱动</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//字符串不能写死，采用配置文件解决</span></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不可以写一起，可能会漏掉，造成无法正常关闭</span></span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>存放数据库连接的容器，节约资源，用户访问高效。用户每次请求都需要向数据库获得链接，而数据库创建连接通常需要消耗相对较大的资源，创建时间也较长。假设网站一天10万访问量，数据库服务器就需要创建10万次连接，极大的浪费数据库的资源，并且极易造成数据库服务器内存溢出、宕机。</p><p>获取DataSource, 然后调用ds.getConnection()</p><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><ul><li>使用<ol><li>导入jar包和依赖jar包</li><li>定义配置文件 c3p0.properties or c3p0-config.xml，放在src目录下</li><li>创建核心对象 ComboPooledDataSource</li><li>获取连接</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();<span class="comment">//驱动程序提供厂商实现，可以通过它获取Connection对象</span></span><br><span class="line">Connection conn = ds.getConnection;</span><br></pre></td></tr></table></figure><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><ul><li><p>使用</p><ol><li>导入<a href="https://repo1.maven.org/maven2/com/alibaba/druid/1.2.8/" target="_blank" rel="noopener">jar包</a></li><li>定义配置文件 可以是任意名称在任意目录下</li><li>加载配置文件 Properties</li><li>获取数据库连接：通过工厂来获取 DruidDataSourceFactory</li><li>获取连接 getConnection</li></ol></li><li><p>定义工具类</p><ol><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">druidUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个DataSource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载配置文件</span></span><br><span class="line">            Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">            prop.load(druidUtils.class.getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>));</span><br><span class="line">            <span class="comment">//获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件druid.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/db1</span></span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">initialSize=<span class="number">5</span></span><br><span class="line">maxActive=<span class="number">10</span></span><br><span class="line">maxWait=<span class="number">3000</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ul><li>Spring框架提供的对JDBC的简单封装</li><li>步骤：<ol><li>导入jar包</li><li>创建JdbcTemplate对象，依赖于DataSource</li><li>调用JdbcTemplate方法完成crud</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算是数据库实战篇简单实现篇，包括了安装MySQL，使用JDBC和数据库连接池。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="数据库" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://tsuki419.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="JDBC" scheme="https://tsuki419.github.io/tags/JDBC/"/>
    
      <category term="Druid" scheme="https://tsuki419.github.io/tags/Druid/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础</title>
    <link href="https://tsuki419.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93.html"/>
    <id>https://tsuki419.github.io/数据库.html</id>
    <published>2022-03-22T13:43:06.585Z</published>
    <updated>2022-03-22T13:55:39.052Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>数据库的基础学习笔记，跟着哈工大的老师<a href="https://www.bilibili.com/video/BV1PJ411F78b" target="_blank" rel="noopener">视频</a>学习。从关系代数到SQL语言，以及一些进阶数据库操作的简单学习。</p><a id="more"></a><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><ul><li><p>关系运算</p><ul><li><p>关系代数</p><p>基于集合的运算</p><p>基于关系代数的数据库语言</p></li><li><p>关系演算</p><ul><li><p>元组演算</p><p>基于逻辑的运算</p></li><li><p>域演算</p><p>基于示例的运算</p></li></ul></li></ul></li></ul><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>列的取值范围就是域，域有相同的数据类型</p><p>笛卡儿积（每一个元素成为n-元组）：多个域的排列组合</p><ul><li><p>笛卡儿积中具有某个意义的元组称为<strong>关系</strong></p><p>域名和属性名不一样，为每一列起的名字叫属性名，不同列可能来自同一个域。</p></li></ul><p>外码连接两个或者多个关系。</p><h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><p>是一种抽象的语言</p><p>前提：满足并相容性，才能进行运算</p><ul><li><p>基本操作：</p><p>并，差，笛卡儿积，选择（选择行操作），投影（选择列进行操作）</p></li><li><p>扩展操作</p><p>交，theta-Join（直接使用连接操作比笛卡儿积加一个选择操作快，DBMS可以进行直接操作），等值连接，特殊连接，自然连接</p></li><li><p>关系代数操作的组合和应用训练</p><ul><li>要特别注意语义</li></ul></li><li><p>关系代数的复杂扩展操作</p><ul><li>除运算（包含了全部的，所有的）</li><li>外链接：左外连接（不丢失左侧元组数据），右外连接，全外连接</li></ul></li></ul><p>集合操作的特性 </p><ul><li><p><strong>关系代数与sql语言的对应关系</strong></p><p>Select  From Where</p><p>sql查询语句就是关于代数的组合</p><p>数据库管理系统就是解析这样的组合，拆解开，按照一定的次序分解开，调用基本的操作算法来予以实现。</p></li></ul><h2 id="关系演算"><a href="#关系演算" class="headerlink" title="关系演算"></a>关系演算</h2><p><strong>元组演算</strong>（<strong>有难度的位置</strong>）：一种逻辑表达，以元祖为基本单位循环遍历。与关系代数可以相互转换。</p><ul><li>存在量词 对r中的每一个t进行F(t)检验</li><li>全称量词 </li></ul><p><strong>关系域演算</strong>：过程性非常差，适合用户使用来表达查询条件</p><p><strong>QBE域演算语言</strong></p><p>通过填表的方式，高度非过程化的查询语言。</p><p><strong>安全性</strong></p><p>关系运算不一定是安全的。不产生无穷关系和无穷验证的运算被称为是安全的。</p><h3 id="关系运算总结"><a href="#关系运算总结" class="headerlink" title="关系运算总结"></a>关系运算总结</h3><p>关系运算有三种：关系代数，关系元组演算，关系域演算，都是抽象的数学关系，体现了三种不同的思维。关系代数是基于集合的操作思维，后两者是基于逻辑的思维。关系代数是安全的。三种关系运算都可以说是非过程性的。</p><p><strong>ISBL语言</strong>：基于关系代数的数据库语言。</p><p><strong>QUEL语言</strong></p><h2 id="数据库语言SQL"><a href="#数据库语言SQL" class="headerlink" title="数据库语言SQL"></a>数据库语言SQL</h2><ol><li>DDL 定义数据库</li><li>DML操纵数据库</li></ol><p>Structured Query Language(SQL)</p><ol><li><p>建立数据库：定义数据库和表，添加元组。</p><p><code>Create datebase xxx</code> </p><p><code>Create table Students(Snumber char(8) not null, Sname char(10), Ssex char(2));</code></p></li><li><p>利用数据库进行简单的查询</p><p><code>Select ... From ... Where...</code></p><ol><li><p>结果唯一性问题 DISTINCT</p></li><li><p>结果排序问题order by 列名 【asc/desc】</p></li><li><p>模糊查询</p><p><code>Select Sname From Student Where Sname Like &#39;张__&#39;;</code></p></li></ol><ul><li>% ： 零个或者多个字符</li><li>_ ： 单个字符</li><li>\： 转义字符</li></ul><ol start="4"><li><p>多表联合查询</p><p>表示笛卡儿积操作。</p><p><code>Select S1.Snumber From SC S1, SC S2 Where S1.Snumber = S2.Snumber and ...</code></p></li></ol></li><li><p>SQL的更新操作</p><ol><li>增 INSERT<ol><li><code>Insert Into Teacher Values (&quot;005&quot;,&quot;张三&quot;);</code></li><li><code>Insert Into St(S#, Sname) Select S#, Sname From Student Order By Sname;</code>批元组新增</li></ol></li><li>删 DELETE<ol><li><code>Delete From Student Where S# =&#39;100&#39;;</code></li><li><code>Update Teacher Set Salary = Salary * 1.05 Where D# in (...)</code></li></ol></li><li>修正与撤销<ol><li><code>Alter Table Student Add Saddr char[40],PID char[18];</code></li><li><code>Alter Table Student Modify Sname char(10);</code></li><li><code>Alter Table Student Drop Unique(Sname);</code></li><li><code>Drop Table Student;</code>撤销学生表Student；delete语句知识删除表中的元组，而drop table 的操作撤销包含表格式，表中所有元组，由该白哦导出的视图等所有相关内容。</li></ol></li><li>指定与关闭命令<ol><li>Use Student</li><li>Close Student</li></ol></li></ol></li><li><p>DBMS交换环境简介</p></li></ol><h2 id="利用SQL语言表达复杂查询"><a href="#利用SQL语言表达复杂查询" class="headerlink" title="利用SQL语言表达复杂查询"></a>利用SQL语言表达复杂查询</h2><ol><li><p>子查询</p><ol><li><p>IN 和 NOT IN</p><p>列出选修了001号课程的学生的学号和姓名</p><p><code>Select S#, Sname From Student Where S# in (Select S# From SC Where C# = &#39;001&#39;);</code></p><p>既学过001号课程又学过002号课程的学生的学号</p><p><code>Select S# From SC Where C# = &#39;001&#39; and S# in(Select S# From SC Where C# = &#39;002&#39;);</code></p><blockquote><p>非相关子查询和相关子查询</p></blockquote></li><li><p>theta some / theta all类似于全称量词和存在量词</p><ol><li><p>找出工资最低的教师姓名</p><p><code>Select Tname From Teacher Where Salary &lt;= all(Select Salary From Teacher);</code></p></li><li><p>找出001号课程成绩不是最高的所有学生的学号</p><p><code>Select S# From SC Where C# = &#39;001&#39; and Score &lt; some(Select Score From SC Where C# = &#39;001&#39;);</code></p></li><li><p>等价性变换需要注意</p><ol><li>some 等价于in</li><li>not in 等价于 &lt;&gt;all</li></ol></li></ol></li><li><p>EXIST</p><ol><li><p>not Exists可以实现很多新功能</p></li><li><p>检索学过001号教师主讲的所有课程的所有同学的姓名</p><p><code>Select Sname From Student Where not exists (Select * From Course Where Course.T#=&#39;001&#39; and not exists(Select * From SC Where S# = Student.S# and C# = Course.C#));</code></p><p>不存在/ 有一门001号老师讲的课程/ 该同学没学过</p></li><li><p>列出没学过李明老师讲授的任何一门课程的所有同学的姓名</p><p><code>Select Sname From Student Where not exists(Select * From SC, Course, Teacher Where Tname = &#39;liming&#39; and Course .T# = Teacher.T# and Course.C# = SC.C# and Student.S# = SC.S#)</code></p><p>不存在/ 学过一门课程</p><font color="red">从肯定过度到否定之否定</font></li><li><p>列出至少学过9803号同学学过的所有课程的同学的学号</p><p><code>Select DISTINC S# From SC SC1 Where not exists (Select * From SC SC2 Where S# = &#39;9803&#39; and not exists (Select * From SC Where C# = SC2.C# and S# = SC1.S#))</code></p><p>不存在// 9803的some一门课程 //该同学 没学过</p></li></ol></li></ol></li></ol><h2 id="利用SQL语言进行计算"><a href="#利用SQL语言进行计算" class="headerlink" title="利用SQL语言进行计算"></a>利用SQL语言进行计算</h2><ol><li><p>聚集函数 count sum avg max min</p><p>求有差额的任意两位教师的薪水差额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> T1.Tname <span class="keyword">as</span> TR1, T2.Tname <span class="keyword">as</span> TR2,T1.Salary-T2.Salary <span class="keyword">From</span> Teacher T1, Teacher T2 <span class="keyword">Where</span> T1.Salary &gt;T2.Salary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> S.S<span class="comment">#, S.Sname, 2015-S.Sage+1 as Syear From Student S;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">Sum</span>(Salary) <span class="keyword">From</span> Teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">AVG</span>(Score) <span class="keyword">From</span> Course C, SC <span class="keyword">Where</span> C.Cname=<span class="string">'数据库'</span> <span class="keyword">and</span> C.C<span class="comment"># = SC.C#;</span></span><br></pre></td></tr></table></figure></li><li><p>分组聚集计算与分组过滤计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求每一个学生的平均成绩</span></span><br><span class="line"><span class="keyword">Select</span> S<span class="comment">#, AVG(Score) From SC Group by S#;</span></span><br><span class="line"><span class="comment">#求每一门的平均成绩</span></span><br><span class="line"><span class="keyword">Select</span> C<span class="comment">#, AVG(Score) From SC　Group by C#;</span></span><br><span class="line"><span class="comment">#求不及格课程超过两门的同学的学号</span></span><br><span class="line"><span class="keyword">Select</span> S<span class="comment"># From SC Where Score&lt;60 Group by S# Having Count(*)&gt;2;</span></span><br><span class="line"><span class="comment">#求有两门以上不及格课程同学的学号及其平均成绩</span></span><br><span class="line"><span class="keyword">Select</span> S<span class="comment">#,AVG(Score) From SC Where S# in(Select S# From SC Where Score&lt;60 Group by S# Having Count(*)&gt;2) Group by S#;</span></span><br></pre></td></tr></table></figure></li><li><p>实现并交差</p><p>UNION/ /INTERSECT/ /EXCEPT </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> S<span class="comment"># From SC Where C#='002'</span></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">Select</span> S<span class="comment"># From SC Where C# = '003';</span></span><br></pre></td></tr></table></figure></li><li><p>空值</p><p><code>Select Sname From Student Where Sage is null;</code></p></li><li><p>内连接，外连接</p><ol><li>求所有教师的任课情况并按教师号排序</li></ol><p><code>Select Teacher.T#, Tname ,Cname From Teacher Inner Join Course On Teacher.T#=Course.T# Order by Teacher.T# ASC;</code></p></li><li><p>SQL视图</p></li></ol><h2 id="数据库完整性"><a href="#数据库完整性" class="headerlink" title="数据库完整性"></a>数据库完整性</h2><p>完整性约束条件（OPAR）</p><ul><li>O： 约束的对象</li><li>P：谓词条件，什么样的约束</li><li>A：触发条件</li><li>R：响应动作，不满足时怎么办</li></ul><p>约束分类</p><ol><li>静态约束，通过Create语句来完成， 在任一时候均满足的约束</li></ol><ul><li><p>域完整性约束：施加在某一列</p><ul><li><p>举例</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span> Student(S<span class="comment"># char(8) not null unique, Sname char(10), Ssex char(2) constraint ctssex check(Ssex='男' or Ssex ='女')， Sage integer check(Sage&gt;=1 and Sage&lt;150),D# char(2) references Dept(D#) on delete cascade, Sclass char(6));</span></span><br></pre></td></tr></table></figure><p>check()加约束条件，同where的使用</p><p>on delete cascade，外键，删除关联（查询）</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span> SC(S<span class="comment"># char(8) check(S# in (select S# from Student)), C# char(3) check(C# in (select C# from course)), Score float(1) constraint ctscore check (Score &gt;= 0.0 and Score &lt;= 100.0)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>关系完整性约束：施加在关系/表上</p></li><li><p>断言，会影响数据库的效率增加数据库的负担，慎用</p><ul><li><code>Create assertion xxx check (条件)</code></li></ul></li></ul><ol start="2"><li>动态约束 ：从一状态到另一状态时应满足的约束</li></ol><ul><li><p>触发器， Trigger</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> delS<span class="comment"># after delete on Student referencing old oldi</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">delete</span> sc <span class="keyword">where</span> S<span class="comment"># = :oldi.S#</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="数据库安全性"><a href="#数据库安全性" class="headerlink" title="数据库安全性"></a>数据库安全性</h2><p>SOTP</p><ol><li>自主安全性的实现方式<ol><li>存储矩阵</li><li>视图</li><li>SQL语言授权和收回授权<ul><li><code>Grant Select On Employee To UserB WITH GRANT OPTION</code></li></ul></li><li>授权过程，注意授权的传播范围（深度，广度）。</li></ol></li><li>强制安全性</li></ol><h2 id="嵌入式SQL"><a href="#嵌入式SQL" class="headerlink" title="嵌入式SQL"></a>嵌入式SQL</h2><p>高级语言与SQL语言结合</p><ol><li><p>变量声明与数据库连接</p><ul><li>exec sql connect to default;</li><li>exec sql disconnect current;</li><li>exec sql commit release;(Oracle)</li><li>exec sql rollback release;(Oracle)</li></ul><p><font color="red"><strong>事务</strong></font>：具有ACID特性的若干数据库基本操作的组合体</p><p>ACID：原子性，一致性，隔离性，持久性</p><p>事物处理是DBMS的核心技术</p><p>declare section; SQL错误捕获语句；SQL connect；SQL commit work；SQL rollback  and disconnect;</p></li><li><p>数据集和游标</p><p>检索多行结果用到<strong>游标</strong>，游标定义一次，多次打开，多次执行，多次关闭。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">exec sql declare cur_student cursor for </span><br><span class="line">select Sno, Sname from Student where Scalss = :vclass</span><br><span class="line">order by Sno</span><br><span class="line">for read only;</span><br><span class="line">exec sql open cur_student;</span><br><span class="line">...</span><br><span class="line">exec sql fetch cur_student into :vSno, :vSname;</span><br><span class="line">...</span><br><span class="line">exec sql close cur_student;</span><br><span class="line">#开关游标</span><br><span class="line">exec sql open cursor_name;</span><br><span class="line">exec sql close cursor_name;</span><br></pre></td></tr></table></figure><p>可滚动游标：可使指针在数据集之间灵活移动。</p><ul><li><p>数据库的更新与删除：分两种，查找更新与定位更新；查找删除和定位删除</p></li><li><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exec sql <span class="keyword">declare</span> stud <span class="keyword">cursor</span> <span class="keyword">for</span> </span><br><span class="line"><span class="keyword">select</span>* <span class="keyword">from</span> student s <span class="keyword">where</span> s.sclass=<span class="string">'000'</span> <span class="keyword">for</span> <span class="keyword">update</span> <span class="keyword">of</span> sclass;</span><br><span class="line">exec sql open stud</span><br><span class="line">While(TRUE)&#123;</span><br><span class="line">exec sql fetch stud into :vSno, :vSname;</span><br><span class="line">exec sql <span class="keyword">update</span> student <span class="keyword">set</span> sclass=<span class="string">'002'</span> <span class="keyword">where</span> <span class="keyword">current</span> <span class="keyword">of</span> stud;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="3"><li><p>异常状态捕获及错误处理机制</p><p>状态是嵌入式SQL语句的执行状态，尤其指一些出错状态。状态捕获和处理包括三部分：</p><ul><li>设置sql通信区：<code>exec sql include sqlca;</code></li><li>设置状态捕获语句： <code>exec sql whenever sqlerror goto report_error;</code></li><li>状态处理语句：<code>report_error:exec sql rollback;</code></li></ul><p>状态捕获语句可能出现无限循环</p><p><code>handle_error: exec sql whenever sqlerror continue;</code></p><p>错误捕获语句的作用域</p></li><li><p>动态SQL</p><p>静态SQL：冒号传递，游标读取。</p><p>动态SQL，构造sql的字符串，然后交给DBMS执行。</p><p>动态sql语句的执行方式</p><ul><li><p>立即执行（text语句一定是完整的）</p></li><li><p>延迟执行</p></li></ul><p>数据字典与SQLDA：系统目录，类似于查找索引的东西</p></li></ol><h2 id="ODBC"><a href="#ODBC" class="headerlink" title="ODBC"></a>ODBC</h2><p>是一种标准，open database connection</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引文件：索引字段和行指针</p><p>创建一个索引： create index  idxName on student(sname)</p><p>撤销索引：drop index idxName</p><p>是否建立：考虑插入时间删除时间访问时间与空间负载的问题。既要改善性能又要控制代价。</p><p><strong>稠密索引和稀疏索引</strong></p><p>稀疏索引（要求排序存储），稠密索引（候选键属性和非候选键属性）</p><p><strong>主索引和辅助索引</strong></p><p>主索引通常是聚簇索引（以磁盘块为索引项。</p><p><strong>倒排索引</strong></p><p>以关键词指向的文档， key {doc1, doc2, doc3…}</p><p><strong>多级索引：B+树</strong></p><h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><p>在连接和乘积运算之前尽早做选择运算</p><p><strong>语义优化</strong></p><p><strong>语法优化</strong>：逻辑查询优化（关系代数操作次序），10个等价性交换定理。</p><p><strong>执行优化</strong>：物理执行优化–代价估算（准确性有待商量）–算法选择和装配次序</p><p>在DML编译器执行</p><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><p><strong>并发控制</strong></p><p>因为数据共享会有不一致发生</p><p>三种典型的不一致现象：丢失修改，不能重复读，脏读</p><blockquote><p>类似于操作系统进程控制</p></blockquote><p><strong>事务</strong>： 数据库管理系统提供的控制数据操作的一种手段， ACID</p><p>封锁协议要考虑：封锁的类型，封锁的粒度（基本在元组），相容性矩阵（一个事务上锁后其他事务的权限），封锁的时机（分为四个）</p><p><strong>故障</strong>：故障恢复包括原子性和持久性</p><p>故障恢复程序占百分之十。是核心技术。</p><ul><li><p><strong>事务故障</strong>： 重做事务Redo和撤销事务Undo</p></li><li><p><strong>系统故障</strong>：掉电，非正常关机。会影响到数据库缓存区。通过运行日志的手段。运行日志定期设置和更新检查点（为了判断从哪一点开始恢复）。</p></li><li><p><strong>介质故障</strong>：磁盘坏了，用副本。确定备份时刻，转储点，运行日志至少要包括在转储点之前。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库的基础学习笔记，跟着哈工大的老师&lt;a href=&quot;https://www.bilibili.com/video/BV1PJ411F78b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;视频&lt;/a&gt;学习。从关系代数到SQL语言，以及一些进阶数据库操作的简单学习。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="数据库" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://tsuki419.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Java爬虫</title>
    <link href="https://tsuki419.github.io/%E7%88%AC%E8%99%AB%E7%BB%83%E6%89%8B.html"/>
    <id>https://tsuki419.github.io/爬虫练手.html</id>
    <published>2022-03-19T13:06:09.825Z</published>
    <updated>2022-03-23T13:59:58.949Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>爬虫练手</p><a id="more"></a> <p>该项目是牛客网的项目，基于webmagic开源项目制作一个高效爬虫。项目采用了springboot框架。</p><h2 id="webmagic"><a href="#webmagic" class="headerlink" title="webmagic"></a>webmagic</h2><p><em><a href="https://www.cnblogs.com/B-rabbit/p/13781986.html" target="_blank" rel="noopener">使用相关博客</a></em></p><p><em><a href="http://webmagic.io/docs/zh/posts/ch1-overview/architecture.html" target="_blank" rel="noopener">官方中文文档</a></em></p><p>最需要关心的是PageProcessor接口。</p><p>自定义的Processor继承PageProcessor接口，重写process(Page page)方法编写抽取逻辑。调用page.putField()将结果存起来。调用page.addTargetRequest()可以存入一个url作为下一个爬取的页面地址。</p><p>如果是单纯的爬取到现在就可以实现了，官方给出的代码做了很多的解耦和扩展。还用到了被我遗忘很久的设计模式。</p><h3 id="策咯模式"><a href="#策咯模式" class="headerlink" title="策咯模式"></a><strong>策咯模式</strong></h3><p>是把process()中处理也页面的方法抽取出来，用继承接口ProcessStrategy()的方式进行，使得代码解耦合。</p><blockquote><p><strong>面向接口编程而不要面向实现编程。</strong></p></blockquote><p>并且对process方法做了增强，前后都留了处理方法。这就是程序扩展性。</p><blockquote><p>如果需要处理的数据超过两条，那么将他们封装成一个model吧！</p></blockquote><h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a><strong>装饰模式</strong></h3><p>在单页爬取的基础上实现多页迭代爬取。</p><p>对ProcessStrategy()进行虚假的实现，通过重载构造方法的方式将单页面处理方法组合进去。再创建一个子类继承这个虚假装饰类，做真正的实现。</p><blockquote><p>插播：<a href="https://blog.csdn.net/willlu10/article/details/79346948" target="_blank" rel="noopener">组合和聚合的区别</a></p><p>组合是较为紧密的关系，部分和整体共存亡，一般通过构造的方式成为整体的一部分。</p><p>聚合式较为松散的关系，部分和整体的生命周期未必一致。部分的实例化过程在整体外进行，通常以属性的方式成为整体的一部分。这是我的理解。</p></blockquote><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a><strong>观察者模式</strong></h3><p>Pipeline会在一个爬取任务完成后被调用，比如存入数据库，或者打印到控制台。 当Pipeline准备好结果时主动去推送结果。</p><p>Observer可以是多个观察者（项目），Observable处理观察者的添加删除通知，自定义的pipeline继承Observable通知观察者（实现接口Observer，又是多态）。</p><h2 id="Jsoup和XPath"><a href="#Jsoup和XPath" class="headerlink" title="Jsoup和XPath"></a>Jsoup和XPath</h2><p>基本思路就是寻找有唯一表示的div，根据class一层层定位（最好直接根据id定位，因为id是唯一的），最后找到想要的元素和属性。</p><p><a href="https://www.yiibai.com/jsoup/jsoup-quick-start.html" target="_blank" rel="noopener">Jsoup是用于解析HTML</a></p><p>XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p><p>爬取数据的注意点：</p><p>听说很费IP (doge.jpg)，还容易犯错，爬虫被封IP最直接的因素的是访问速度过快。谨慎爬取。建议使用代理ip。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爬虫练手&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="项目" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="WebMagic" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E9%A1%B9%E7%9B%AE/WebMagic/"/>
    
    
      <category term="Java" scheme="https://tsuki419.github.io/tags/Java/"/>
    
      <category term="WebMagic" scheme="https://tsuki419.github.io/tags/WebMagic/"/>
    
      <category term="Xpath" scheme="https://tsuki419.github.io/tags/Xpath/"/>
    
  </entry>
  
  <entry>
    <title>2021总结</title>
    <link href="https://tsuki419.github.io/2021%E6%80%BB%E7%BB%93.html"/>
    <id>https://tsuki419.github.io/2021总结.html</id>
    <published>2021-12-31T13:18:24.454Z</published>
    <updated>2021-12-31T13:51:35.537Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2021的最后一天了，年度总结来啦！</p><a id="more"></a> <p>跨年是在实验室和宿舍度过的，但是是在摸鱼啦。</p><p>今年还算是努力学习的一年，虽然也时而摸鱼丧气，但还是一步步进步了很多。上半年在写论文，虽然发不发还是问题，但是学会了用latex，学会了用endnote整理文献，下半年再学框架和做项目，学习了数据库基础，SSM框架，SpringBoot框架，尝试了运行开源项目，从黑马旅游网的简单制作到mall的开源项目，研究了老师给的车联网项目，也在此基础上做自己的项目。最近在学习linux。心血来潮也会刷刷leetcode，虽然通常坚持不了几天。刷题其实还是挺费时间的。大热门的深度学习也想涉及一点，总之就是东一脚西一脚，深深浅浅摸石头过河。</p><p>跨专业真的是很痛苦的一件事，虽然做好了补基础的准备，但把位置摆在一群科班堆里的时候，还是感受到了不小的差距，仿佛在经历科班的本科生活。又说到丧气的事了，以此为理由而接受差距放任自己是绝对不可能的，新一年也要加油要努力。现在已经很少提自己以前的专业了，还是希望把现在的位置摆在CSer，一个菜鸟CSer努力进化的路。</p><p>研究生生活更多的是在自学，老师给的只是课题和资源，因为专业领域的问题，导师实际上能帮助的很少，时常在困惑自己的毕业和就业问题。焦虑并不能解决问题，所以不如学习技术，充实自己。</p><p>新年期待的话希望能找到好的实习，好的就业，继续好好写博客，好好生活。</p><p>未来的路还很长，拭目以待。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2021的最后一天了，年度总结来啦！&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://tsuki419.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="岁岁念" scheme="https://tsuki419.github.io/categories/%E7%94%9F%E6%B4%BB/%E5%B2%81%E5%B2%81%E5%BF%B5/"/>
    
    
      <category term="总结" scheme="https://tsuki419.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>car2car项目运行实录</title>
    <link href="https://tsuki419.github.io/car2car%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E5%AE%9E%E5%BD%95.html"/>
    <id>https://tsuki419.github.io/car2car项目运行实录.html</id>
    <published>2021-12-27T12:40:04.635Z</published>
    <updated>2022-04-11T10:49:58.546Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在尝试做项目，说是课题也不像课题，老师给的权限很宽，那就按我的想法来尝试，记录一下尝试的过程和途中遇到的bug…</p><a id="more"></a> <h2 id="陈年旧项目简介"><a href="#陈年旧项目简介" class="headerlink" title="陈年旧项目简介"></a>陈年旧项目简介</h2><p>本来是打算在原项目的基础上做的，所以最开始选择了导入jar包然后添加到项目中。jar包的下载就是度娘。然后导入项目。</p><ul><li><p>本项目用到了以下几个额外的jar包</p><p>POI： 读取excel数据</p><p>net.sf.json.JSONObject：转换beans，maps，collections, java arrays, xml等为JSON对象和反转换的java库</p><p>Gson是Google提供的用来在Java对象和JSON数据之间映射的JAVA类库</p><p>commons.fileupload.jar为web应用程序或者servlet提供文件上传功能。</p></li><li><p>IDEA项目导入jar包的方法有<a href="https://blog.csdn.net/Golden_soft/article/details/80952243" target="_blank" rel="noopener">两个</a></p><ol><li>File –&gt; Project Structure-&gt;Modules-&gt;Dependencies，点绿色的加号导入</li><li>需要导入的Jar包上，点击右键，选择Add as Library…</li></ol></li></ul><blockquote><p><a href="https://lbs.amap.com/api/javascript-api/guide/abc/quickstart" target="_blank" rel="noopener">amap</a>的使用方法</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="noopener">sessionStorage</a>对象</p></blockquote><h2 id="修改为maven项目"><a href="#修改为maven项目" class="headerlink" title="修改为maven项目"></a>修改为maven项目</h2><p>但是导jar包配置各种东西真的太麻烦了，于是决定用maven管理老项目，pom.xml配置真香。</p><ul><li><p>打包成maven项目](<a href="https://blog.csdn.net/weixin_30348133/article/details/114560553" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30348133/article/details/114560553</a>)</p><ol><li>.classpath 文件：指定了源文件位置，con容器为JRE，编译输出位置。指定了java项目在逻辑结构与文件系统的物理结构之间的对应关系。</li><li>右键选择 JavaDemo（项目名称），选择“Configure –&gt; Convert to Maven Project”， 填写“Group ID”和“Artifact Id”都为“JavaDemo”</li><li>完成pom.xml的修改—复制了一部分itheima的项目配置</li><li>参照标准的目录结构修修补补总算是弄好了</li></ol></li><li><p>部署在tomcat上</p><ol><li><p>报错：<code>org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Tomcat]....</code>搜索了好几个回答，发现相似点是jar包问题，就试着删除web目录下的lib目录，证实报错原因是jar包的重复，问题解决。</p></li><li><p>原来的项目编码是gbk的，编译出错。为了方便改为UTF-8，可以使用<a href="https://blog.csdn.net/qq_33204709/article/details/110821783" target="_blank" rel="noopener">批量处理脚本</a>，完美解决</p></li><li><p>报错2：<code>Skipping non-war project</code> tomcat没有启动，无tomcat日志信息，解决方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> <span class="comment">&lt;!--加这一句--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>到这里为止，终于<font color="green"><strong>部署到tomcat成功</strong></font>，但是页面乱码了，不要紧，肯定是编码问题。</p></li><li><p>报错3：<a href="https://blog.csdn.net/qq_43682690/article/details/109364514" target="_blank" rel="noopener">Servlet不能正常访问</a>，论版本兼容的重要性。tomcat各版本的<a href="https://blog.csdn.net/qq_37651267/article/details/94592106" target="_blank" rel="noopener">兼容</a>，其实是在运行其他项目时遇到的问题，一并归纳。</p></li></ol></li><li><p><strong>数据库设计</strong></p><p>编码问题解决好了，那就进入数据库的连接。原本的数据库与前端页面的交互代码写得比较繁杂，这里可以优化为采用数据库连接池和Spring框架提供的JDBCTemplate来进行优化。</p><p>数据库的设计方面，数值范围是一个讨论问题。</p><ol><li>报错：运行tomcat时无法连接到数据库，本地测试和连接其他的项目都可以，唯独这个项目不可以。尝试了给数据库更高的权限，尝试了改密码，都没有解决。啊卡了好久，<font color="red">解决无果</font>。</li><li>本地测试了jdbc工具类和连接池工具类都没有问题。</li><li>优化注解注入，简化web.xml的配置</li></ol><p>目前的计划：</p><ol><li>了解已知代码的逻辑实现和已有的功能。</li><li>文献查询，聚类分析的基本方式和基于LoRa的应用</li><li>取合适的模型进行坐标点的分类</li></ol></li></ul><h2 id="修改项目框架为Springboot"><a href="#修改项目框架为Springboot" class="headerlink" title="修改项目框架为Springboot"></a>修改项目框架为Springboot</h2><p>更新为主流的应用框架。参考了开源项目-mall</p><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><ol><li>一边学一边做，首先使用之前新建的数据库，采用新学Mybatis框架</li><li>编写实体类 domain.User/domain.Data</li><li>编写dao接口 UserMapper/DataMapper</li><li>测试</li></ol><h3 id="导入静态资源和页面"><a href="#导入静态资源和页面" class="headerlink" title="导入静态资源和页面"></a>导入静态资源和页面</h3><p>​        静态资源放在static.asserts下面，页面放置在templates下</p><p>无法加载样式—莫名其妙又可以加载了</p><ul><li><p>代替jsp使用<a href="https://www.cainiaojc.com/springboot/springboot-thymeleaf-view.html" target="_blank" rel="noopener">Thymeleaf</a> ,不是前后端分离的。</p></li><li><p><a href="https://www.cnblogs.com/JeasonIsCoding/p/13232648.html" target="_blank" rel="noopener">前后端分离</a>都提到了解决跨域问题，所以什么是<strong>跨域问题</strong>？<strong>nginx</strong>是什么？如何使用<strong>redis</strong>？<em>参考<a href="https://blog.csdn.net/qq_43875413/article/details/107609745" target="_blank" rel="noopener">1</a></em></p></li><li><p>用json和ajax实现前后端分离—-原项目就是采用了前后端分离的做法，所以正好保留</p></li></ul><blockquote><p>原项目实现登录功能(伪)：</p><p>使用SpringMVC的话就直接砍掉了servlet，使用Contoller替换掉servlet，SpringMVC嵌入了自动的<strong>json</strong>转换，只需要加一个<strong>@ResponseBody</strong></p><p>反正折腾了半天是可以实现登录成功了，但是跳转了wmap.html页面。</p></blockquote><h3 id="添加了lombok"><a href="#添加了lombok" class="headerlink" title="添加了lombok"></a>添加了lombok</h3><p>Lombok表达式—面向函数编程</p><p><em>参考<a href="https://www.jianshu.com/p/2543c71a8e45" target="_blank" rel="noopener">1</a> <a href="https://www.cnblogs.com/zhangyinhua/p/8623018.html" target="_blank" rel="noopener">2</a></em></p><h3 id="MybatisGenerator"><a href="#MybatisGenerator" class="headerlink" title="MybatisGenerator"></a>MybatisGenerator</h3><p>使用Mybatis Generator可以快速根据数据库中已经建立好的表来创建mybatis代码</p><ul><li><p>发生错误，<code>The specified target project directory mall-tiny-01\src\main\resources does not exist</code>  路径不对，参考<a href="https://blog.csdn.net/ZY_201803/article/details/105781696" target="_blank" rel="noopener">博客</a>解决，查看edit configuration拼接路径</p><p>生成的文件到了另一模块上，果然还是路径错了</p></li><li><p>未报错但是没有产生文件，参考<a href="https://blog.csdn.net/Hedon954/article/details/106235296" target="_blank" rel="noopener">博客</a>修改路径中的\为/，成功生成文件</p></li><li><p>报错 <code>Column id, specified as an identity column in  does not exist in the table.</code> 参考<a href="https://www.lovesofttech.com/mybatis/MBGForMySQL8.html" target="_blank" rel="noopener">博客</a>解决，在生成器的配置文件里的数据库连接地址中添加: <code>nullCatalogMeansCurrent=true</code></p></li><li><p>路径追加问题 <em><a href="https://blog.csdn.net/u010696826/article/details/86306113" target="_blank" rel="noopener">参考博客</a></em></p></li><li><p><em><a href="https://blog.csdn.net/weixin_44368212/article/details/109283097" target="_blank" rel="noopener"><font color="orange">参考博客1</font></a>–详细介绍了generator 参考<a href="https://blog.csdn.net/m0_37989980/article/details/104521920" target="_blank" rel="noopener">2</a>步骤详细。</em></p></li><li><p>使用@MapperScan注解扫描多个包，<em><a href="https://blog.csdn.net/manchengpiaoxue/article/details/84937257" target="_blank" rel="noopener">参考</a></em></p></li><li><p>启动项目异常，<code>Result Maps collection already contains value for</code>，原因是Mybatis gennerator生成xml，但是如果同名xml之前已经存在，那么生成的时候会在xml里面在之前的代码后面继续追加，而不会覆盖同名的语句。因此有可能报这个错误。如果是再次生成代码，必须先将已经生成的代码删除，仔细检查一下xml文件看是否存在两个id为BaseResultMap的resultMap，删除多余的，只保留一个就可以解决问题。<a href="https://www.jianshu.com/p/c3e91f2d1a05" target="_blank" rel="noopener"><em>参考博客</em></a></p></li></ul><h3 id="Swagger-UI"><a href="#Swagger-UI" class="headerlink" title="Swagger-UI"></a>Swagger-UI</h3><ul><li><p>使用步骤</p><ol><li>添加项目依赖</li><li>添加Swagger2Config配置类</li><li>给Controller加注解</li><li>启动项目，线上观看结果 <em><a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></em>。</li></ol></li><li><p>报错： <code>Plugin &#39;org.springframework.boot:spring-boot-maven-plugin:&#39; not found</code></p><p>解释最清楚的<a href="https://blog.csdn.net/u014163312/article/details/106986010" target="_blank" rel="noopener">博客</a>，解决方法是添加版本号</p><blockquote><p>spring-boot-maven-plugin没有设置version，它会先去远程仓库找最新的版本，然后download到本地，然后完成maven操作等。但是远程仓库里没有相应的jar包，导致执行maven编译出错。因为远程仓库里已经有了最新版本的路径，它就不会使用已经存在的版本。</p></blockquote></li><li><p>CommentGenerator自定义注释生成中，<code>org.mybatis.generator.api.dom.java.CompilationUnit;</code>中方法解析失败，<code>Cannot resolve method &#39;isJavaInterface&#39; in &#39;CompilationUnit&#39;</code> 果真是版本问题，Mybatis generator的版本由1.4.0改为1.3.7就好了。本菜鸡一个个试出来的，不知道有没有更好的方法。</p></li><li><p>项目启动出错，<code>Failed to start bean &#39;documentationPluginsBootstrapper&#39;; nested exception is java.lang.NullPointerException</code> 据说是版本号的冲突，心累，<font color="red">未解决，把Swagger-UI和MybatisGenerator都删了，然后回到开始实现登录功能</font>哈哈哈哈我又回来了，Springboot版本号改成了2.1.3.RELEASE，原来用的2.6.1，感谢<a href="https://blog.csdn.net/qq_31795591/article/details/121742434" target="_blank" rel="noopener">博主</a>的提供的思路。</p></li></ul><p><a href="https://zhuanlan.zhihu.com/p/71140571" target="_blank" rel="noopener">逆向工程</a></p><ul><li><p><code>The server time zone value &#39;???ú±ê×??±??&#39; is unrecognized or represents more than one time zone.</code> 数据库和系统时区差异所造成的，解决方法加<code>serverTimezone=GMT%2B8</code>，<em>参考<a href="https://blog.csdn.net/pannubi/article/details/81193445" target="_blank" rel="noopener">博客</a></em></p></li><li><p>总之成功了^w^</p></li><li><p>修改Mybatis Generator注释生成规则—-<font color="red">待解决</font></p><blockquote><p>CommentGenerator为MyBatis Generator的自定义注释生成器，修改addFieldComment方法使其生成Swagger的@ApiModelProperty注解来取代原来的方法注释，添加addJavaFileComment方法，使其能在import中导入@ApiModelProperty，否则需要手动导入该类，在需要生成大量实体类时，是一件非常麻烦的事。</p></blockquote></li></ul><h2 id="Spring-Security登录认证"><a href="#Spring-Security登录认证" class="headerlink" title="Spring Security登录认证"></a>Spring Security登录认证</h2><p>学习了新项目有了新的想法，使用SpringSecurity实现登录功能。</p><p>实现登录功能有的几个方式：<a href="https://www.cnblogs.com/greyzeng/p/12926834.html#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">参考1</a>，<a href="https://blog.csdn.net/qq_45950109/article/details/116357184" target="_blank" rel="noopener">参考2</a></p><p><strong>Springboot使用pagehelper</strong></p><p>pagehelper的<a href="https://blog.csdn.net/csdn_huzeliang/article/details/79350425" target="_blank" rel="noopener">使用方法</a>有两种，集成成功。</p><ul><li>错误：SpringBoot单元测试使用@Test没有run方法的问题  <a href="https://blog.csdn.net/qq374461948/article/details/106226475" target="_blank" rel="noopener">参考</a> 因为改成了2.1.7.RELEASE，版本不同，项目的结构也不同。测试方法的public没了。然后改回了2.6.0.版本，但是仍然有问题。pagehelper循环依赖的问题。项目启动不了，我版本又改回了<a href="https://blog.csdn.net/layonly/article/details/121436957" target="_blank" rel="noopener">2.5.6</a>，会标红但是可以运行。</li><li>引发了新问题，需要登陆才能查看swagger文档，但是登录密码错误，<font color="red">待解决</font>，好像知道原因了，是因为添加了security和token，虽然还没有集成完全。</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>继续完成security—-需要更改数据库</p><p>因为需要自定义</p><ul><li>UserDetailsService:SpringSecurity定义的核心接口，用于根据用户名获取用户信息，需要自行实现；</li><li>UserDetails：SpringSecurity定义用于封装用户信息的类（主要是用户信息和权限），需要自行实现；</li><li>设计数据库—用MybatisGenerator生成model和mapper—完成service—controller</li></ul><blockquote><p>Hibernate-validator校验框架（待添加）</p></blockquote><p><a href="http://159.138.37.243/article/weixin_34205076/92387445" target="_blank" rel="noopener">使用教程</a></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li><p>错误：<code>Could not resolve placeholder &#39;jwt.secret&#39; in value &quot;${jwt.secret}&quot;</code> 忘记配置了</p></li><li><p>获取权限列表，因为我的项目是简化版本的权限只需要，mall项目是四表联查找到权限封装为Permission对象，Security究竟是如何读取权限的呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleGrantedAuthority</span> <span class="keyword">implements</span> <span class="title">GrantedAuthority</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">510L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String role;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleGrantedAuthority</span><span class="params">(String role)</span> </span>&#123;</span><br><span class="line">        Assert.hasText(role, <span class="string">"A granted authority textual representation is required"</span>);</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Swagger测试接口时一直没反应，后来发现是Swagger配置类没有增加登录认证功能</p></li><li><p>错误：<code>Encoded password does not look like BCrypt</code> 密码的加密方式不对，找到原因了，数据库取出的代码是未加密的，而mall的项目中数据库存的密码是加过密的，偷个懒先把他的密码拷贝过来试试。</p></li><li><p>茅塞顿开，救命我会用debug了，找寻一个项目的运行逻辑可以打断点一步步运行。（迟来的领悟，其实之前看视频看到过）</p></li><li><p>错误：<code>java.lang.String is in module java.base of loader &#39;bootstrap&#39;; com.tsuki.cartocar.mbg.model.UserInfo is in unnamed module of loader &#39;app&#39;</code>类型转换错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AdminUserDetails，仍旧是权限定义错误</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">    <span class="comment">//返回当前用户的权限</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考了<a href="https://segmentfault.com/a/1190000008423240" target="_blank" rel="noopener">博客</a> </p><p>List&lt;? extends Number&gt; 定义了泛型的<code>上界</code>是 Number, 即 List 中包含的元素类型是 Number 及其子类. 而 List&lt;? super Number&gt; 定义了泛型的<code>下界</code>, 即 List 中包含的是 Number 及其父类.</p></blockquote></li><li><p>permissionlist.stream() <a href="https://blog.51cto.com/u_15082397/2590753" target="_blank" rel="noopener">Stream API的聚合使用</a></p><p>获取权限的修改主要在三个文件，UserServiceImpl.java &amp; SecurityConfig.java &amp; AdminUserDetails.java &amp; UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserController</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"获取用户所有权限（包括+-权限）"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/permission/&#123;userId&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;List&lt;UserInfo&gt;&gt; getPermissionList(<span class="meta">@PathVariable</span> String userId) &#123;</span><br><span class="line">        UserInfo userInfo = userInfoMapper.selectByPrimaryKey(userId);</span><br><span class="line">        List&lt;UserInfo&gt; permissionList = userService.getPermissionList(userInfo);</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(permissionList);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//UserServiceImpl</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title">getPermissionList</span><span class="params">(UserInfo userInfo)</span> </span>&#123;</span><br><span class="line">        List&lt;UserInfo&gt; permission = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//String roleId = userInfo.getRoleId();</span></span><br><span class="line">        permission.add(userInfo);</span><br><span class="line">        <span class="keyword">return</span> permission;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//SecurityConfig</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取登录用户信息</span></span><br><span class="line">        <span class="keyword">return</span> username -&gt; &#123;</span><br><span class="line">            UserInfo userInfo = userService.getUserByUsername(username);</span><br><span class="line">            <span class="keyword">if</span> (userInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                List&lt;UserInfo&gt; permissionList = userService.getPermissionList(userInfo);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AdminUserDetails(userInfo,permissionList);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//AdminUserDetails</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="comment">//返回当前用户的权限</span></span><br><span class="line">        <span class="keyword">return</span> permissionList.stream()</span><br><span class="line">                .filter(permission -&gt; permission.getRoleId()!=<span class="keyword">null</span>)</span><br><span class="line">                .map(permission -&gt;<span class="keyword">new</span> SimpleGrantedAuthority(userInfo.getRoleId()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>错误：<code>org.springframework.web.bind.MissingPathVariableException: Required URI template variable &#39;userId&#39; for method parameter type String is not present</code> 主要是自己对注解的理解不清楚导致的，@PathVariable请求路径名称写错了。</p></li><li><p><a href="https://blog.csdn.net/qq_32224047/article/details/108615301" target="_blank" rel="noopener">自定义UserDetails实现用户登录访问</a> – <a href="https://blog.csdn.net/qq_32224047/article/details/108607746" target="_blank" rel="noopener">从数据库读取数据实现用户登录访问</a></p></li><li><p>错误：<code>java.sql.SQLException: Field &#39;id&#39; doesn&#39;t have a default value</code>  是因为MybatisGenerator生成的Mapper.xml中插入默认主键是自增的从而不插入主键，而我的不是。暂时的解决方式是修改主键为自增，参考<a href="https://blog.csdn.net/weixin_42585386/article/details/109203750" target="_blank" rel="noopener">博客</a>也并没有解决。主键自增要求键值为int类型。都要改。。所以修改mapper中的insert方法，添加插入主键，成功！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.tsuki.cartocar.mbg.model.UserInfo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">    SELECT LAST_INSERT_ID()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into user_info (id, username, password, role_id, </span><br><span class="line">    devID)</span><br><span class="line">  values (#&#123;id, jdbcType=VARCHAR&#125;, #&#123;username,jdbcType=VARCHAR&#125;, #&#123;password,jdbcType=VARCHAR&#125;, #&#123;roleId,jdbcType=VARCHAR&#125;, </span><br><span class="line">    #&#123;devid,jdbcType=VARCHAR&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><font color="green" size="4"><strong>到目前为止，用户的登录注册就完成了！大功告成！</strong></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在尝试做项目，说是课题也不像课题，老师给的权限很宽，那就按我的想法来尝试，记录一下尝试的过程和途中遇到的bug…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="项目" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="cart" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E9%A1%B9%E7%9B%AE/cart/"/>
    
    
      <category term="Java" scheme="https://tsuki419.github.io/tags/Java/"/>
    
      <category term="SpringBoot" scheme="https://tsuki419.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="https://tsuki419.github.io/MyBatis.html"/>
    <id>https://tsuki419.github.io/MyBatis.html</id>
    <published>2021-12-24T08:27:59.420Z</published>
    <updated>2021-12-27T11:52:47.758Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>系列三来了…这次是Mybatis</p><p>写此系列的目的是做一个学习笔记管理，方便以后复习用。</p><a id="more"></a> <h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li><p>添加坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建数据表</p></li><li><p>编写实体类</p></li><li><p>编写dao接口  mapper</p></li><li><p>编写映射文件UserMapper dtd的<a href="https://blog.csdn.net/weixin_44964041/article/details/114928039" target="_blank" rel="noopener">约束头参考</a></p></li><li><p>编写核心配置文件SqlMapConfig.xml</p></li><li><p>编写测试类</p></li></ol><p><strong>增删改查</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.selectList(<span class="string">"userMapper.findAll"</span>);</span><br><span class="line">sqlSession.insert(<span class="string">"userMapper.add"</span>, user);</span><br><span class="line">sqlSession.update(<span class="string">"userMapper.update"</span>, user);</span><br><span class="line">sqlSession.delete(<span class="string">"userMapper.delete"</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h2><p> <strong>SqlMapConfig.xml</strong></p><ol><li><p>emvironments—数据库环境的配置，指定事务管理类型和数据源</p><ul><li>transactionManager: <strong>JDBC</strong>, MANAGED</li><li>dataSource: <strong>POOLED</strong> , JNDI, UNPOOLED</li></ul></li><li><p>mappers—加载映射文件 userMapper.xml</p></li><li><p>properties—加载外部properties文件</p></li><li><p>typeAliases—定义别名</p></li><li><p>typeHandlers—配置自定义类型处理器</p><ul><li><strong>处理日期转换为例</strong><ol><li>定义转换类继承类BaseTypeHandler&lt;&gt;</li><li>覆盖4个未实现的方法</li><li>在核心配置文件SqlMapConfig.xml中进行配置</li><li>测试</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//将java类型转换为数据库需要的类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Date date, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = date.getTime();</span><br><span class="line">        preparedStatement.setLong(i, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//以下三个将数据库类型转换为java类型</span></span><br><span class="line">    <span class="comment">//String是要转换的字段名称</span></span><br><span class="line">    <span class="comment">//resultSet查询出的结果集</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> aLong = resultSet.getLong(s);</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(aLong);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义注册类型处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"com.tsuki.handler.DateTypeHandler"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>plugins 扩展功能 – PageHelper，第三方插件进行功能扩展</p><ul><li><p>步骤</p><ul><li><p>导入通用的PageHelper坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在核心配置文件中配置PageHelper插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置分页助手插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><ul><li><code>PageHelper.startPage(1, 2);</code></li></ul></li></ul></li></ul></li></ol><p><strong>相应api</strong>(单元测试用)</p><ol><li>SqlSessionFactoryBuilder</li><li>SqlSessionFactory: openSession() or <strong>openSession</strong>(boolean autoCommit) 可以设置自动提交事务</li><li>SqlSession，增删改查</li></ol><p><strong>Dao层实现</strong></p><ol><li><p>传统方式</p></li><li><p>代理开发方式</p><p><strong>区别</strong>就是需不需要手动实现接口</p><p>sqlSession.getMapper(UserMapper.class);</p><p>要保持四个一致：映射文件中的mapper的namespace要是interface的全包名，id和方法名一致，parameterType和形参类型一致，resultType和返回值类型一致。</p></li></ol><h2 id="映射配置文件深入"><a href="#映射配置文件深入" class="headerlink" title="映射配置文件深入"></a>映射配置文件深入</h2><h3 id="1-常用标签"><a href="#1-常用标签" class="headerlink" title="1. 常用标签"></a>1. 常用标签</h3><p><code>&lt;select&gt; &lt;insert&gt; &lt;update&gt; &lt;delete&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.tsuki.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        insert into user values(#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;, #&#123;birthday&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-动态sql"><a href="#2-动态sql" class="headerlink" title="2. 动态sql"></a>2. 动态sql</h3><p>占内存</p><p><code>&lt;if&gt; &lt;foreach&gt;&lt;sql&gt;&lt;where&gt;</code></p><h2 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h2><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><strong>常用注解</strong>：用注解替代映射文件</p><p>简单查询—-注解加载接口方法上</p><p><code>@Insert @Delete @Update @Select</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.tsuki.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>复杂查询</p><p><code>@Result @Results @One(一对一) @Many(一对多，多对多)</code></p><p>套娃</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><ol><li>java.lang.ClassCastException: com.github.pagehelper.PageHelper cannot be cast to org.apache.ibatis. 探究plugins分页插件时的问题，多半是<a href="https://blog.csdn.net/weixin_39183543/article/details/85933600" target="_blank" rel="noopener">版本问题</a>—-论springboot的好处，内置版本号</li><li>is not known to the MapperRegistry, 原因是namespace没有修改为全包名</li><li>用Mybatis插入数据但是没反应，用错了标签，’<insert>‘用成了’<update>‘</update></insert></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系列三来了…这次是Mybatis&lt;/p&gt;
&lt;p&gt;写此系列的目的是做一个学习笔记管理，方便以后复习用。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="框架笔记" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Mybatis" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/Mybatis/"/>
    
    
      <category term="Java" scheme="https://tsuki419.github.io/tags/Java/"/>
    
      <category term="Mybatis" scheme="https://tsuki419.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC笔记</title>
    <link href="https://tsuki419.github.io/SpringMVC.html"/>
    <id>https://tsuki419.github.io/SpringMVC.html</id>
    <published>2021-12-24T08:27:59.393Z</published>
    <updated>2021-12-27T11:52:28.853Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>系列二来了…这次是SpringMVC</p><p>写此系列的目的是做一个学习笔记管理，方便以后复习用。</p><a id="more"></a> <h2 id="Spring集成web环境"><a href="#Spring集成web环境" class="headerlink" title="Spring集成web环境"></a>Spring集成web环境</h2><p><strong>原理：</strong></p><ol><li>添加坐标 servlet和jsp</li><li>添加web层servlet，在web.xml配置servlet</li><li>web通过spring容器获取Service对象—–在web项目中通过<strong>ServletContextListener</strong>监听Web应用的活动，在web应用启动时，加载spring配置文件，创建上下文对象<strong>ApplicationContext</strong>，将其存储到最大的与<strong>servletContext</strong>域中，这样就可以在任意位置从域中获取ApplicationContext对象了。（web.xml配置监听器）</li></ol><p><strong>步骤</strong></p><ol><li><p>配置ContextLoaderListener监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--全局化初始参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用WebapplicationcontextUtils获取应用上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">ApplicationContext app = (ApplicationContext) WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br><span class="line">UserService userService = app.getBean(UserService.class);</span><br><span class="line">userService.save();</span><br></pre></td></tr></table></figure></li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li><p>导入坐标 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;疑问导入spring-web包时加了范围会出错--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置核心控制器DispatcherServlet  web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springmvc的前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载servlet时加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建Controller类和视图页面，注入Spring容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/quick"</span>)<span class="comment">//访问路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"controller running"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用注解配置Controller类中业务方法的映射地址</p></li><li><p>配置SpringMVC核心文件spring-mvc.xml</p><p>配置扫描组件，和context空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Controller组件扫描-需要加载context空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tsuki.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置组件扫描,小tip，可以设置扫或者不扫--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tsuki"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>客户端发起请求测试</p><p>访问路径”/quick”</p></li></ol><h2 id="相关组件"><a href="#相关组件" class="headerlink" title="相关组件"></a>相关组件</h2><p>DispathcherServlet; HandlerMapping; HandlerAdapter; Handler; View Resolver; View;</p><ul><li><p>注解解析</p><ol><li><strong>@RequestMapping</strong>: URL与处理请求的方法之间建立联系     </li></ol><p>​        参数： value,method(RequestMethod.POST), params</p><ol start="2"><li><p>视图解析器配置： 有默认配置—-可以指定功能进行增强–配置内部资源视图解析器 redirect和forward</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器，但是这样做不好阅读啊（小疑问），而且做了代码内部修改--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="SpringMVC的请求和响应"><a href="#SpringMVC的请求和响应" class="headerlink" title="SpringMVC的请求和响应"></a><strong>SpringMVC的请求和响应</strong></h2><h3 id="数据响应的方式"><a href="#数据响应的方式" class="headerlink" title="数据响应的方式"></a>数据响应的方式</h3><h4 id="1-页面跳转"><a href="#1-页面跳转" class="headerlink" title="1. 页面跳转"></a>1. 页面跳转</h4><ol><li><p>返回字符串–参见快速入门， prefix + String + suffix 代表页面跳转</p></li><li><p>返回ModelAndView </p><p>save()参数还可以是HttpServletRequest等官方的定义，但是不建议使用，model和view可以拆开使用也可以一起使用，可以new也可以作为形参传入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/quick4"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">save4</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       model.addAttribute(<span class="string">"username"</span>, <span class="string">"lisi"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success.jsp"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/quick3"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save3</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class="line">       modelAndView.setViewName(<span class="string">"success.jsp"</span>);</span><br><span class="line">       modelAndView.addObject(<span class="string">"username"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">       <span class="keyword">return</span> modelAndView;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/quick2"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       modelAndView.setViewName(<span class="string">"success.jsp"</span>);</span><br><span class="line">       modelAndView.addObject(<span class="string">"username"</span>, <span class="string">"helloworld"</span>);</span><br><span class="line">       <span class="keyword">return</span> modelAndView;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/quick"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"controller running"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success.jsp"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-回写数据"><a href="#2-回写数据" class="headerlink" title="2. 回写数据"></a>2. 回写数据</h4><ol><li><p>直接返回字符串 @ResponseBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/quick6"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save6</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"henry"</span>);</span><br><span class="line">    user.setAge(<span class="number">30</span>);</span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = objectMapper.writeValueAsString(user);<span class="comment">//jackson进行转换</span></span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>返回对象和集合–设置将对象转换为json对象输出（配置处理器映射器）—可以通过mvc的注解替代以上操作</p><p>spring-mvc.xml， 同时要加入springmvc的命名空间，就可以不需要json转换工具了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xmlns:mvc="http://www.springframework.org/schema/mvc"</span><br><span class="line">xsi:schemaLocation=" http://www.springframework.org/schema/mvc  http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h3><h4 id="1-实现数据请求方式"><a href="#1-实现数据请求方式" class="headerlink" title="1. 实现数据请求方式"></a>1. 实现数据请求方式</h4><ul><li><p>基本数据类型参数</p></li><li><p>POJO类型参数</p></li><li><p>数组类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//localhost/Springdemo/quick8?strs='111'&amp;strs='222'</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/quick8"</span>)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save8</span><span class="params">(String[] strs)</span></span>&#123;</span><br><span class="line">       System.out.println(Arrays.asList(strs));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上三种都比较简单，只要名称一致框架就会自动封装</p></blockquote></li><li><p>集合类型参数</p><ol><li><p>将集合包装到一个POJO中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">    <span class="comment">//提供get 和set</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//VO作为形式参数</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/quick10"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save10</span><span class="params">(VO vo)</span></span>&#123;</span><br><span class="line">    System.out.println(vo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此处要求VO中的属性名称和表单提交的名称一致</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"userList[0].username"</span>&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>ajax请求时指定contextType为json，使用</p><p><strong>@RequestBody</strong></p><p>访问jQuery失败：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开发资源的访问 spring-mvc.xml, 开放静态资源的访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userList = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">userList.push(&#123;<span class="attr">username</span>:<span class="string">"zhangsan"</span>, <span class="attr">age</span>:<span class="number">12</span>&#125;);</span><br><span class="line">userList.push(&#123;<span class="attr">username</span>: <span class="string">"lisi"</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type:<span class="string">"POST"</span>,</span><br><span class="line">    url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/quick9"</span>,</span><br><span class="line">    data:<span class="built_in">JSON</span>.stringify(userList),<span class="comment">//将数组转为json数据</span></span><br><span class="line">    contentType: <span class="string">"application/json; charset=utf-8"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/quick9"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save9</span><span class="params">(@RequestBody List&lt;User&gt; userList)</span></span>&#123;</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-获取数据细节"><a href="#2-获取数据细节" class="headerlink" title="2. 获取数据细节"></a>2. 获取数据细节</h4><ul><li><p>中文乱码问题</p></li><li><p>@RequestParam （value， required， defaultValue）和 @PathVariable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//localhost/quick11?name=zhangsan</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/quick11"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save11</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//localhost/quick11?username=zhangsan</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/quick12/&#123;username&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save12</span><span class="params">(@PathVariable(<span class="string">"username"</span>)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义类型转换器–</p><ul><li>定义com.tsuki.converter.DateConverter实现Converter接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tsuki.converter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;<span class="comment">//注意不要导错包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String dateStr)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        Date date=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date=format.parse(dateStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在配置文件中声明转换器，在 <code>&lt;annotation-driven&gt;</code> 中引用转换器。spring-mvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开发资源的访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.tsuki.converter.DateConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获取Servlet相关API：直接形参注入</p></li><li><p>@RequestHeader和@CookieValue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/quick14"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save14</span><span class="params">(@CookieValue(value = <span class="string">"JSESSIONID"</span>, required = <span class="keyword">false</span>)</span> String user_agent)</span>&#123;</span><br><span class="line">    System.out.println(user_agent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/quick13"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save13</span><span class="params">(@RequestHeader(value = <span class="string">"User-Agent"</span>, required = <span class="keyword">false</span>)</span> String user_agent)</span>&#123;</span><br><span class="line">    System.out.println(user_agent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件上传</p><ul><li><p>表单编写</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--注意enctype的填写--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/quick15"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    名称&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br/&gt;</span><br><span class="line">    文件&lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>pom.xml导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件上传解析器 spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"500000"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写文件上传代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/quick15"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save15</span><span class="params">(String username, MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//uploadFile形参名字与表单的提交文件name名称一致</span></span><br><span class="line">    System.out.println(username);</span><br><span class="line">    String originalFilename = uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="comment">//保存到某位置</span></span><br><span class="line">    uploadFile.transferTo(<span class="keyword">new</span> File(<span class="string">"F:\\图片\\"</span>+originalFilename));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ul><li><p>快速入门</p><ol><li><p>创建拦截器实现HandlerInterceptor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标方法执行之前 执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle running..."</span>);</span><br><span class="line">        String param = request.getParameter(<span class="string">"param"</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"yes"</span>.equals(param))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"success.jsp"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//目标方法执行之后，视图对象返回之前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        modelAndView.addObject(<span class="string">"name"</span>, <span class="string">"Java"</span>);</span><br><span class="line">        System.out.println(<span class="string">"postHandle running..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在流程都执行完毕后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"aftercomletion running..."</span>);</span><br><span class="line">        HandlerInterceptor.<span class="keyword">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置拦截器 spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--对那些资源进行拦截--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.tsuki.interceptor.MyInterceptor1"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="3"><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/target"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"target is running..."</span>);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"name"</span>, <span class="string">"Tomcat"</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">"index.jsp"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="登录验证案例（待实践）"><a href="#登录验证案例（待实践）" class="headerlink" title="登录验证案例（待实践）"></a>登录验证案例（待实践）</h3><p>过滤器：</p><ol><li>获取session对象 request.getSession().getAttribute(“user”)</li><li>判断是否有user，否（return false） 是 （return true）</li></ol><p>登录：</p><ol><li>login(username, password){} 调用userService.login():返回User（查表并用jdbcTemplate接收）</li><li>判断user是不是空，有（存到Session，并跳转首页） 否（跳转到登录页面）</li></ol><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>配合日志输出使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置异常处理器--&gt;</span><br><span class="line">   &lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;defaultErrorView&quot; value=&quot;error.jsp&quot;/&gt;</span><br><span class="line">       &lt;!--&lt;property name=&quot;exceptionMappings&quot;&gt;</span><br><span class="line">           &lt;map&gt;</span><br><span class="line">               &lt;entry key=&quot;异常类型&quot; value=&quot;错误视图&quot;&gt;</span><br><span class="line">           &lt;/map&gt;</span><br><span class="line">       &lt;/property&gt;--&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>自定义异常处理</p><pre><code>1. 创建异常处理器类实现HandlerExceptionResolver 2. 配置异常处理器到spring-mvc.xml 3. 编写异常页面</code></pre><h2 id="JdbcTemplate-待补充"><a href="#JdbcTemplate-待补充" class="headerlink" title="JdbcTemplate(待补充)"></a>JdbcTemplate(待补充)</h2><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><blockquote><p>SimpleDateFormat中有<a href="https://blog.csdn.net/xuhengpan/article/details/78217555" target="_blank" rel="noopener">两个方法</a>，parse()和format()</p><p>parse()把String型的字符串转换成特定格式的date类型</p><p>format()把Date型的字符串转换成特定格式的String类型</p></blockquote><blockquote><p><strong>equals：</strong>参考<a href="https://blog.csdn.net/changshuchao/article/details/86714875" target="_blank" rel="noopener">博客</a></p><p>public boolean equals(Object obj) {        return (this == obj);    }</p></blockquote><h2 id="运行问题"><a href="#运行问题" class="headerlink" title="运行问题"></a>运行问题</h2><ol><li>报错1：<a href="https://blog.csdn.net/qq_43682690/article/details/109364514" target="_blank" rel="noopener">Servlet不能正常访问</a>，错误代码500，原因在于版本，我原本用的是tomcat10，改成tomcat9之后成功解决。论版本兼容的重要性。tomcat各版本的<a href="https://blog.csdn.net/qq_37651267/article/details/94592106" target="_blank" rel="noopener">兼容</a></li><li>创建web项目还是不熟练。<a href="https://blog.csdn.net/LK_Lawliet/article/details/108797483" target="_blank" rel="noopener">教程</a></li><li>本来Servlet要注入到web.xml中才会运行的，但是不知道什么原因不需注入也可以访问到。</li><li><a href="https://blog.csdn.net/Mrs_Yu/article/details/87003383" target="_blank" rel="noopener">SpringMVC错误</a>：org.springframework.web.servlet.DispatcherServlet noHandlerFound ，我的错误原因是访问静态资源，改为访问jsp就成功了</li><li>在导入了jackson的坐标后发生了新的错误：java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/exc/InvalidDefinitionException ，找到问题了，<a href="https://blog.csdn.net/an_xiaowu/article/details/84134035" target="_blank" rel="noopener">版本不兼容</a>，致命</li><li>在测试jsp页面发出post请求，用$.ajax响应集合类型参数是出现找不到jQuery和访问路径/quick的情况，原因是路径问题。<code>url:&quot;${pageContext.request.contextPath}/quick9&quot;,</code> 是jsp获取绝对路径的方式，这篇博客<a href="https://www.cnblogs.com/hy1988/p/5811445.html" target="_blank" rel="noopener">解析</a></li><li>SpringMVC中已经配置了解决中文乱码问题的过滤器后，还会出现中文乱码现象，尝试了<a href="https://blog.csdn.net/qq_41760181/article/details/105070526" target="_blank" rel="noopener">博客</a>所述的方法但是还<font color="red">未解决乱码问题</font>，但是使用maven发布时不会乱码</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系列二来了…这次是SpringMVC&lt;/p&gt;
&lt;p&gt;写此系列的目的是做一个学习笔记管理，方便以后复习用。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="框架笔记" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SpringMVC" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/SpringMVC/"/>
    
    
      <category term="Java" scheme="https://tsuki419.github.io/tags/Java/"/>
    
      <category term="SpringMVC" scheme="https://tsuki419.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记</title>
    <link href="https://tsuki419.github.io/Spring.html"/>
    <id>https://tsuki419.github.io/Spring.html</id>
    <published>2021-12-24T08:27:49.419Z</published>
    <updated>2021-12-27T11:52:04.314Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>写此系列的目的是做一个学习笔记管理，方便以后复习用。</p><p>Spring是<strong>轻代码，重配置</strong>的框架。</p><a id="more"></a> <p>Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）为内核。</p><p>提供了展现层 SpringMVC 和持久层 Spring JDBCTemplate 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。</p><p>Spring框架的核心功能：</p><p><strong>创建管理所有的Java对象</strong>，这些对象被称为Bean。</p><p><em><a href="https://www.runoob.com/w3cnote/basic-knowledge-summary-of-spring.html" target="_blank" rel="noopener">参考文档</a></em></p><p><em><a href="https://www.bilibili.com/video/BV1WZ4y1H7du" target="_blank" rel="noopener">参考视频</a></em></p><h2 id="Spring快速入门"><a href="#Spring快速入门" class="headerlink" title="Spring快速入门"></a>Spring快速入门</h2><ol><li><p>导入Spring开发的基本包坐标</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入spring的context坐标，context依赖core、beans、expression--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>编写Dao接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserDao save method running...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>创建Spring核心配置文件</p><p>在类路径下（resources）创建applicationContext.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Spring配置文件中配置UserDaoImpl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>使用Spring的API获得Bean实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span>  </span><br><span class="line">             ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    userDao.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h2><h3 id="重要配置标签"><a href="#重要配置标签" class="headerlink" title="重要配置标签"></a>重要配置标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span>标签</span><br><span class="line">    id属性:在容器中Bean实例的唯一标识，不允许重复</span><br><span class="line">    class属性:要实例化的Bean的全限定名</span><br><span class="line">    scope属性:Bean的作用范围，常用是Singleton(默认)和prototype</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>标签：属性注入</span><br><span class="line">        name属性：属性名称</span><br><span class="line">        value属性：注入的普通属性值</span><br><span class="line">        ref属性：注入的对象引用值</span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span>标签</span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span>标签</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>标签</span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span>标签</span><br><span class="line"><span class="tag">&lt;<span class="name">import</span>&gt;</span>标签:导入其他的Spring的分文件</span><br></pre></td></tr></table></figure><h3 id="Bean实例化的三种方式"><a href="#Bean实例化的三种方式" class="headerlink" title="Bean实例化的三种方式"></a><strong>Bean实例化的三种方式</strong></h3><p>无参构造方法实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"userDao"</span> <span class="attr">class</span> = <span class="string">"com.itheima.dao.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工厂静态方法实例化</p><p>工厂实例方法实例化</p><h3 id="Bean的依赖注入"><a href="#Bean的依赖注入" class="headerlink" title="Bean的依赖注入"></a>Bean的依赖注入</h3><p>依赖注入（Dependency Injection）：它是 Spring 框架核心 IOC（反转控制） 的具体实现。</p><p>在编写程序时，通过控制反转，<strong>把对象的创建交给了 Spring，</strong>但是代码中不可能出现没有依赖的情况。<br>IOC 解耦只是降低他们的依赖关系，但不会消除。例如：业务层仍会调用持久层的方法。</p><p>用依赖注入的方式管理Bean之间的依赖关系。依赖注入可以让Bean以配置文件组织在一起，是一种优秀的<strong>解耦方式</strong>。</p><p>依赖注入有两种方式，set注入和构造注入。（设计模式解耦合）</p><p><strong>set注入和构造注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--set方式注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.tsuki.dao.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.tsuki.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set方法后的名字是name，ref是指向注入的UserDao的id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--构造器方式注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.tsuki.dao.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.tsuki.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h2><p><strong>applicationContext：</strong>接口类型，代表应用上下文，可以通过其实例获得 Spring 容器中的 <strong>Bean 对象</strong></p><p>ApplicationContext的实现类</p><p>1）ClassPathXmlApplicationContext<br>      它是从类的根路径下加载配置文件 推荐使用这种<br>2）FileSystemXmlApplicationContext<br>      它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。<br>3）AnnotationConfigApplicationContext<br>      当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext app = <span class="keyword">new</span> ClasspathXmlApplicationContext(<span class="string">"xml文件"</span>);</span><br><span class="line">app.getBean(<span class="string">"id"</span>);</span><br><span class="line">app.getBean(Class);</span><br></pre></td></tr></table></figure><h2 id="Spring配置数据源（连接池）"><a href="#Spring配置数据源（连接池）" class="headerlink" title="Spring配置数据源（连接池）"></a>Spring配置数据源（连接池）</h2><p>druid步骤：</p><ol><li><p>导入依赖 pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--版本要求高于4.11--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建DataSource 在Spring中采用注入容器的方法 applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/db1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>将参数提取到properties文件中后如何注入容器 </p><p>1.需要引入context的命名空间和约束路径</p><ul><li>命名空间 <code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></li><li>约束路径 <code>http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd</code></li><li>applicationContext.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载外部配置文件，classpath是从类加载文件resources中加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注入datasource--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spl表达式，类似el表达式的用法 value="$&#123;key&#125;"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);<span class="comment">//加载Spring的配置文件</span></span><br><span class="line">    <span class="comment">//从容器中获取对象</span></span><br><span class="line">    DataSource ds = (DataSource) applicationContext.getBean(<span class="string">"dataSource"</span>);</span><br><span class="line">    Connection conn = ds.getConnection();</span><br><span class="line">    System.out.println(conn);</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>简化和舍弃Spring的配置文件，方便快捷</p><ul><li><p>原始注解</p><ol><li><p>@Component  <code>&lt;bean id=&quot;userDao&quot; class=&quot;com.tsuki.dao.impl.UserDaoImpl&quot;&gt;&lt;/bean&gt;</code> </p><p>@Controller @Service @Repository</p></li><li><p>@Autowired @Qualifier---@Resource按名称注入 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.tsuki.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>@Value(普通属性) @Scope</p></li></ol></li><li><p>配置组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置组件扫描--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tsuki"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新注解开发—全注解开发</p><p>旧注解有几方面不能满足</p><p><code>@Configuration</code> Spring的核心配置类，用<strong>类的方式替代xml文件， 注解的方式替代标签</strong></p><ol><li>非自定义的bean <code>@Bean(&quot;dataSource&quot;)</code></li><li>配置文件properties <code>@PropertySource(&quot;classpath:jdbc.properties&quot;)</code></li><li>组件扫描 <code>@ComponentScan(&quot;com.tsuki&quot;)</code></li><li>引入import <code>@Import</code></li></ol></li></ul><h3 id="Junit的集成"><a href="#Junit的集成" class="headerlink" title="Junit的集成"></a><strong>Junit的集成</strong></h3><ol><li><p>导入spring集成Junit坐标 pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入Junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--版本要求高于4.11--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入spring的test坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>@Runwith代替原来运行周期 <code>@RunWith(SpringJUnit4ClassRunner.class)</code></p></li><li><p>@ContextConfiguration指定配置文件或配置类 <code>@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</code></p></li><li><p>@Autowired注入需要测试的对象</p></li><li><p>创建测试方法进行测试</p></li></ol><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h2 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h2><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写此系列的目的是做一个学习笔记管理，方便以后复习用。&lt;/p&gt;
&lt;p&gt;Spring是&lt;strong&gt;轻代码，重配置&lt;/strong&gt;的框架。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="框架笔记" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/Java/%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/Spring/"/>
    
    
      <category term="Java" scheme="https://tsuki419.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="https://tsuki419.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>摩尔投票法</title>
    <link href="https://tsuki419.github.io/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E6%B3%95.html"/>
    <id>https://tsuki419.github.io/摩尔投票法.html</id>
    <published>2021-10-22T02:32:35.082Z</published>
    <updated>2022-04-11T13:28:58.922Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有时候，刷算法题的关键是读懂题目。时常卡在读不懂题目=_=</p><a id="more"></a> <h3 id="摩尔投票法"><a href="#摩尔投票法" class="headerlink" title="摩尔投票法"></a>摩尔投票法</h3><p>今日的力扣每日一题是<a href="https://leetcode-cn.com/problems/majority-element-ii/" target="_blank" rel="noopener">229.Majority Element II</a>。看懂题目后最开始的想法就是普通的，遍历一遍数组统计出每个数字出现的次数存在数组中，然后再遍历一次数组找出是否存在次数大于⌊ n/3 ⌋的元素。</p><p>看了评论区题解学到了新的解题方法。刷题在于学习总结嘛。本题可以用到摩尔投票法的变体。</p><p>摩尔投票法出自<a href="https://www.cs.ou.edu/~rlpage/dmtools/mjrty.pdf" target="_blank" rel="noopener">论文</a>，算法解决的问题是如何在任意多的候选人中，选出获得的票数最多的那个。<a href="https://www.cs.utexas.edu/~moore/best-ideas/mjrty/index.html" target="_blank" rel="noopener">算法演示</a>，<a href="https://blog.csdn.net/happyeveryday62/article/details/104136295" target="_blank" rel="noopener">文章</a>做了很详细的解读。摩尔投票法主要分为两个阶段，第一阶段筛选可能的元素，第二阶段验证。应用在众数的解答上。</p><p>Majority Element II 解答</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; majorityElement(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">int</span> cx = <span class="number">0</span>, cy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>((cx == <span class="number">0</span>||num == x)&amp;&amp; num != y)&#123;</span><br><span class="line">                cx++;</span><br><span class="line">                x = num;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cy == <span class="number">0</span>|| num == y)&#123;</span><br><span class="line">                cy++;</span><br><span class="line">                y = num;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cx--;</span><br><span class="line">                cy--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> countx = <span class="number">0</span>, county = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num == x) countx++;</span><br><span class="line">            <span class="keyword">if</span>(num == y) county++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> target = nums.size()/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(countx &gt; target) res.push_back(x);</span><br><span class="line">        <span class="keyword">if</span>(county &gt; target &amp;&amp; y != x) res.push_back(y);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/weixin_42768679/article/details/81567231" target="_blank" rel="noopener">博客</a></p><p><a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener">169 Majority Element</a> 解答</p><p>前提条件中假设数组非空，且一定存在多数元素，所以可以省掉第二阶段验证。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">0</span> || num == res)&#123;</span><br><span class="line">                res = num;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;       </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候，刷算法题的关键是读懂题目。时常卡在读不懂题目=_=&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="算法" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://tsuki419.github.io/tags/leetcode/"/>
    
      <category term="摩尔投票法" scheme="https://tsuki419.github.io/tags/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MAD</title>
    <link href="https://tsuki419.github.io/Mad.html"/>
    <id>https://tsuki419.github.io/Mad.html</id>
    <published>2021-07-29T02:48:20.446Z</published>
    <updated>2021-07-29T03:10:15.312Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>常调侃说做MAD死路一条，实际上也真是如此？</p><a id="more"></a> <p>最近重拾做视频，发完以后没人看难免失落就去搜了这个问题，不禁思考起剪mad的初衷。</p><p><strong>什么是一个好的MAD？</strong></p><p>一个好的MAD是讲述一个好的故事或者给观者带来好的视觉享受，用MAD讲好故事才是一开始想做的。</p><p>现在的状况是有点陷入了技术突破的死区里，一直很想做一个欧美风的MAD，大概就是视觉体验吧。说实话现在剪的视频没什么内容。最近剪的两篇个人向都在追求技术，只是镜头的简单拼接，勉强算是考虑了镜头的衔接。放在众多优秀作品里只能说普通又普通，没有画面，没有故事，没有播放量才是常态。而且我做mad是为了播放量吗，虽然不在意播放是假的，但是初心是为了突破自己，做自己喜欢的事，所以不忘初心真的很难的。</p><p>(人总是在找合适的理由安慰自己哈)</p><p>虽然这些年也没有把重心放在做视频上，好几年不学新技术，但也确实是毫无进步。剪了这么多年仍旧没什么质量提升，其实这种状况下不如不发，好好沉淀一下。</p><p>重要的从来不是在AE和Vegas里花多少时间，它只是工具，重要的是表达自己的思想，享受尝试新东西的快乐。所以，喜欢就坚持下去！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常调侃说做MAD死路一条，实际上也真是如此？&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://tsuki419.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="MAD" scheme="https://tsuki419.github.io/categories/%E7%94%9F%E6%B4%BB/MAD/"/>
    
    
      <category term="MAD" scheme="https://tsuki419.github.io/tags/MAD/"/>
    
  </entry>
  
  <entry>
    <title>Vegas 导入 AE</title>
    <link href="https://tsuki419.github.io/Vegas%E8%BD%ACAE.html"/>
    <id>https://tsuki419.github.io/Vegas转AE.html</id>
    <published>2021-07-28T02:48:27.120Z</published>
    <updated>2021-07-28T02:58:21.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>电脑带不动Pr，所以一开始就用的vegas，虽然vegas有很多插件</p><a id="more"></a> <p>例如newBlue都很好用，但是做特效和拉曲线当然还是AE方便，于是就想着有没有什么方法能在vegas粗剪的视频导入ae。以前就找过相关的教程，但是时隔太久不用，我存在哪里已经忘了，又折腾半天，这回一定要存好。于是有了这篇博客。</p><p><strong>操作步骤：</strong></p><ol><li>在vegas中粗剪完成放在一个视频轨道上，删掉音频</li><li>文件==&gt;导出 ==&gt; Media Composer AAF File</li><li>打开AE， 文件==&gt;导入==&gt;Pro Import After Effects…</li><li>修改合成大小</li></ol><p>附：使用的软件版本是AE CC 2015和Vegas13</p><p><em>参考<a href="https://www.bilibili.com/video/BV1rb411T7gJ" target="_blank" rel="noopener">视频</a></em>，感谢up主，视频还提供了AE转Vegas的操作，暂时没有用到就先m一下，不展开记录了</p><p><strong>完</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;电脑带不动Pr，所以一开始就用的vegas，虽然vegas有很多插件&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="剪辑" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%AA%E8%BE%91/"/>
    
      <category term="vegas" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%AA%E8%BE%91/vegas/"/>
    
    
      <category term="vegas" scheme="https://tsuki419.github.io/tags/vegas/"/>
    
  </entry>
  
  <entry>
    <title>Latex</title>
    <link href="https://tsuki419.github.io/latex.html"/>
    <id>https://tsuki419.github.io/latex.html</id>
    <published>2021-06-29T08:45:38.400Z</published>
    <updated>2021-07-15T08:42:31.950Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第一次用latex排版，记录一下使用过程中遇到的问题。</p><a id="more"></a> <p>哈哈哈论文能不能投不知道，调格式倒是挺折腾。记录下来以后说不定会用到，省得再折腾一次。总的来说上手还是挺快的，博主的<a href="https://blog.csdn.net/LXX516/article/details/90288544" target="_blank" rel="noopener">经历</a>和<a href="https://blog.csdn.net/u011436427/article/details/82934856" target="_blank" rel="noopener">latex编辑注意事项</a>也给小白的我很多的帮助。</p><p>texlive的编辑器显示效果不是很好看，但是图个省事就没有安装vscode。</p><h2 id="下载模板"><a href="#下载模板" class="headerlink" title="下载模板"></a>下载模板</h2><p>首先下载完成IEEEtrans模板之后的使用。</p><ul><li><p>IEEEtran.cls文件复制到texlive\2021\texmf-local\tex\latex </p></li><li><p>以管理员方式运行cmd，<code>&gt;texhash</code></p></li><li>将.tex文件复制到texlive文件夹里面即可</li></ul><p><em>参见<a href="https://blog.csdn.net/weixin_42634342/article/details/100107667" target="_blank" rel="noopener">博客</a>。</em></p><p>然后就可以开始快乐编辑内容。</p><h2 id="公式篇"><a href="#公式篇" class="headerlink" title="公式篇"></a>公式篇</h2><p>关于插入公式真的是很方便，只要多用几次就能掌握常用的命令，希腊字母根据发音的写法也很好记，打开了新世界大门。</p><p>如何插入公式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;equation&#125;</span><br><span class="line">\begin&#123;split&#125;</span><br><span class="line"> P(t)=P(t-t_0)+D(t),</span><br><span class="line"> x = a + b.</span><br><span class="line">\end&#123;split&#125;</span><br><span class="line">\end&#123;equation&#125;</span><br></pre></td></tr></table></figure><p>要记得加入宏包 <code>\usepackage{amsmath}</code></p><p>公式的常用符号的写法<a href="https://zhuanlan.zhihu.com/p/110756681" target="_blank" rel="noopener">看这里</a>。符号大全补充<a href="https://blog.csdn.net/yen_csdn/article/details/79966985" target="_blank" rel="noopener">看这里</a>。</p><p>导数相关的符号<a href="https://www.jianshu.com/p/8aa646fad1c5" target="_blank" rel="noopener">看这里</a>。都是基础问题就不赘述。</p><p>如何<a href="https://blog.csdn.net/sinat_38816924/article/details/84347665" target="_blank" rel="noopener">排版公式</a>，善用&amp;符号。</p><h2 id="图片篇"><a href="#图片篇" class="headerlink" title="图片篇"></a>图片篇</h2><p>加入宏包 <code>\usepackage{graphicx}</code></p><p>如何插入图片，<a href="https://blog.csdn.net/qq_38526623/article/details/103737589" target="_blank" rel="noopener">看这里</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;[htbp]</span><br><span class="line">    \centering</span><br><span class="line">    \includegraphics[width=2.5in]&#123;fig1.eps&#125;</span><br><span class="line">    \caption&#123;name&#125;</span><br><span class="line">    \label&#123;fig1&#125;</span><br><span class="line">\end&#123;figure&#125; </span><br><span class="line">%如何解决路径问题</span><br><span class="line">graphicspath&#123;&#123;img/&#125;&#125;%当前路径下存放图片的文件夹</span><br></pre></td></tr></table></figure><p>如何插入eps图片，简单粗暴，我是直接PS另存为解决了。其他解决方法<a href="https://blog.csdn.net/lqhbupt/article/details/20545297" target="_blank" rel="noopener">看这里</a>。</p><h2 id="文献篇"><a href="#文献篇" class="headerlink" title="文献篇"></a>文献篇</h2><p>如何插入文献？</p><ol><li><p>创建bibtex文件，建立参考文件库。</p><p>便捷使用google的引用功能，轻松搞定！</p></li><li><p>文章主体添加引用 <code>\cite{ref}</code></p></li><li><p>四次编译，就可以引用位置和参考文献位置链接互通啦！这里被卡了一会，参考<a href="https://www.cnblogs.com/parrynee/archive/2010/03/02/1676369.html" target="_blank" rel="noopener">文章</a>总算解决掉了。</p></li><li><p>高亮内容的制作，<a href="https://zhuanlan.zhihu.com/p/114733612" target="_blank" rel="noopener">参考文章</a></p></li></ol><p>如何插入链接型的文献呢？<a href="https://blog.csdn.net/techfield/article/details/19933589" target="_blank" rel="noopener">看这里</a></p><p>我是手动修改的.bib文件，不知道有没有更便捷准确的方法，如果有人看的话，欢迎邮件交流。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Misc&#123;timmurphy.org,</span><br><span class="line">howpublished = &#123;[EB/OL]&#125;,</span><br><span class="line">note = &#123;\url&#123;http://timmurphy.org/2009/07/22/line-spacing-in-latex-documents/&#125; Accessed April 4, 2010&#125;,</span><br><span class="line">title = &#123;Line Spacing in LaTeX documents&#125;,</span><br><span class="line">author = &#123;Murphy, Timothy I&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在插入链接型参考文献的时候，引申一下<a href="https://blog.csdn.net/shanshu12/article/details/7561274" target="_blank" rel="noopener">EB/OL</a>的含义。</p><h2 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h2><p>通过图片和公式的交叉引用，无论公式挪动到哪里都能正确的编号，省了自己费劲数的功夫，还不会产生失误。</p><p><code>\ref</code>命令配合<code>\label</code>的使用基本就解决了图片公式以及文献的引用，一个ref走天下。</p><ul><li><p>引用图片 <code>\ref{fig1}</code></p></li><li><p>引用文献 <code>\ref{ref1}</code></p></li><li><p>引用方程 <code>\ref{equation1}</code> 此外还可以导入amsmath包用 <code>\eqref{equation1}</code></p></li></ul><p><em>参考文章： <a href="https://blog.csdn.net/robert_chen1988/article/details/53315012" target="_blank" rel="noopener">文章1</a> <a href="https://blog.csdn.net/sinat_36301420/article/details/79334728" target="_blank" rel="noopener">文章2</a></em></p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>在学习latex的过程中，刷到了一篇关于如何写好论文的<a href="http://panpei.site/2014/02/02/how-to-write-a-paper/" target="_blank" rel="noopener">博客</a>，给迷茫的我上了一课。</p><blockquote><p>写paper的两种方式:</p><ol><li>Idea-&gt;Do Research-&gt;Write Paper</li><li>Idea-&gt;Write Paper-&gt;Do Research</li></ol></blockquote><p>以前一直认为论文是以结果为导向的，这可能与我过往做物理实验的经历有关。还是道行尚浅啊。每次在组会上说到论文没有成果展示的时候，老师都会反问一句一定要有成果吗？当时不理解，现在读到这篇文章，哦原来，paper真正的目的是交流思想的。其实写文章的过程中也查阅了很多的文献，仔细回想一下这些优秀的文献也确实如此。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次用latex排版，记录一下使用过程中遇到的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="论文" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AE%BA%E6%96%87/"/>
    
      <category term="latex" scheme="https://tsuki419.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AE%BA%E6%96%87/latex/"/>
    
    
      <category term="Latex" scheme="https://tsuki419.github.io/tags/Latex/"/>
    
      <category term="IEEEtrans" scheme="https://tsuki419.github.io/tags/IEEEtrans/"/>
    
  </entry>
  
</feed>
